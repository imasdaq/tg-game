    # -*- coding: utf-8 -*-
import json
from datetime import datetime
import os
import random
from typing import Dict, Any, Optional

from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

DATA_FILE = "game_data.json"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–æ–≤: key = str(user_id), value = dict
players: Dict[str, Dict[str, Any]] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
CLASS_KB = ReplyKeyboardMarkup(
    [["‚öîÔ∏è –í–æ–∏–Ω", "üßô –ú–∞–≥", "üïµÔ∏è –í–æ—Ä"]],
    one_time_keyboard=True,
    resize_keyboard=True
)
MAIN_KB = ReplyKeyboardMarkup(
    [["üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "üìä –°—Ç–∞—Ç—É—Å"], ["üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üßæ –ö–≤–µ—Å—Ç—ã"], ["üõí –ú–∞–≥–∞–∑–∏–Ω", "‚öôÔ∏è –ü–æ–º–æ—â—å"]],
    resize_keyboard=True
)

# –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Å–æ–≤
CLASS_STATS = {
    "‚öîÔ∏è –í–æ–∏–Ω": {"hp": 110, "attack": 7, "defense": 4, "ability": "–ú–æ—â–Ω—ã–π —É–¥–∞—Ä"},
    "üßô –ú–∞–≥": {"hp": 95, "attack": 9, "defense": 2, "ability": "–û–≥–Ω–µ–Ω–Ω–∞—è –≤—Å–ø—ã—à–∫–∞"},
    "üïµÔ∏è –í–æ—Ä": {"hp": 100, "attack": 7, "defense": 3, "ability": "–¢–µ–Ω–µ–≤–∞—è –∞—Ç–∞–∫–∞"},
}

# –ú–∞–≥–∞–∑–∏–Ω (–±–∞–∑–æ–≤—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç)
SHOP_ITEMS = {
    "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è": {"price": 15, "type": "consumable", "effect": {"heal": 35}},
    "–†—É–Ω–∞ —Å–∏–ª—ã": {"price": 30, "type": "consumable", "effect": {"attack_plus": 1}},
    "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {"price": 30, "type": "consumable", "effect": {"defense_plus": 1}},
}

# ----------------------------- –£—Ç–∏–ª–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è -----------------------------

def load_players() -> None:
    global players
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                players = json.load(f)
        except Exception:
            players = {}
    else:
        players = {}

def save_players() -> None:
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(players, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

# ----------------------------- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ --------------------------------

def get_xp_to_next(level: int) -> int:
    # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è: 100, 150, 200, ...
    return 100 + (level - 1) * 50

def ensure_player(user_id: int, name: str) -> Dict[str, Any]:
    uid = str(user_id)
    if uid not in players:
        players[uid] = {
            "name": name,
            "class": None,
            "level": 1,
            "xp": 0,
            "hp": 100,
            "max_hp": 100,
            "attack": 5,
            "defense": 2,
            "gold": 25,
            "inventory": {"–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è": 2},
            "quests": {},
        }
        save_players()
    return players[uid]

def set_class(player: Dict[str, Any], class_name: str) -> None:
    stats = CLASS_STATS[class_name]
    player["class"] = class_name
    player["max_hp"] = stats["hp"]
    player["hp"] = stats["hp"]
    player["attack"] = stats["attack"]
    player["defense"] = stats["defense"]
    # –í—ã–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç
    if "rat_hunter" not in player["quests"]:
        player["quests"]["rat_hunter"] = {
            "title": "–ö—Ä—ã—Å–æ–ª–æ–≤",
            "desc": "–£–±–µ–π 3 –∫—Ä—ã—Å –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.",
            "target_type": "rat",
            "required": 3,
            "progress": 0,
            "status": "active",
            "reward": {"xp": 100, "gold": 30, "item": "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"},
        }
    save_players()

def add_item(player: Dict[str, Any], item_name: str, count: int = 1) -> None:
    inv = player["inventory"]
    inv[item_name] = inv.get(item_name, 0) + count
    save_players()

def consume_item(player: Dict[str, Any], item_name: str, count: int = 1) -> bool:
    inv = player["inventory"]
    if inv.get(item_name, 0) >= count:
        inv[item_name] -= count
        if inv[item_name] <= 0:
            del inv[item_name]
        save_players()
        return True
    return False

def heal_player(player: Dict[str, Any], amount: int) -> int:
    before = player["hp"]
    player["hp"] = min(player["max_hp"], player["hp"] + amount)
    save_players()
    return player["hp"] - before

def grant_rewards(player: Dict[str, Any], xp: int, gold: int, loot: Optional[str] = None) -> str:
    player["xp"] += xp
    player["gold"] += gold
    loot_text = ""
    if loot:
        add_item(player, loot, 1)
        loot_text = f"\n–î–æ–±—ã—á–∞: {loot}"
    level_up_text = check_level_up(player)
    save_players()
    return f"+{xp} XP, +{gold} –∑–æ–ª–æ—Ç–∞.{loot_text}{level_up_text}"

def check_level_up(player: Dict[str, Any]) -> str:
    text = ""
    while player["xp"] >= get_xp_to_next(player["level"]):
        player["xp"] -= get_xp_to_next(player["level"])
        player["level"] += 1
        # –†–æ—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        player["max_hp"] += 8
        player["attack"] += 1
        if player["level"] % 2 == 0:
            player["defense"] += 1
        player["hp"] = player["max_hp"]
        text += f"\nüî∫ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å {player['level']} —É—Ä–æ–≤–µ–Ω—å. HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
    if text:
        save_players()
    return text

def generate_enemy(level: int) -> Dict[str, Any]:
    # –¢–∏–ø—ã –≤—Ä–∞–≥–æ–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    enemy_types = [
        {"type": "rat", "name": "–ö—Ä—ã—Å–∞", "hp": 30, "attack": 4, "defense": 1, "xp": 25, "gold": (5, 10), "loot": [None, None, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"]},
        {"type": "goblin", "name": "–ì–æ–±–ª–∏–Ω", "hp": 45, "attack": 6, "defense": 2, "xp": 40, "gold": (8, 18), "loot": [None, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "–†—É–Ω–∞ —Å–∏–ª—ã"]},
        {"type": "wolf", "name": "–í–æ–ª–∫", "hp": 55, "attack": 7, "defense": 3, "xp": 55, "gold": (10, 20), "loot": [None, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"]},
    ]
    base = random.choice(enemy_types)
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é
    scale = max(0, level - 1)
    enemy = {
        "type": base["type"],
        "name": base["name"],
        "hp": base["hp"] + 5 * scale,
        "max_hp": base["hp"] + 5 * scale,
        "attack": base["attack"] + scale,
        "defense": base["defense"] + (scale // 2),
        "xp": base["xp"] + 10 * scale,
        "gold": random.randint(*base["gold"]) + 2 * scale,
        "loot": random.choice(base["loot"]),
    }
    return enemy

def dmg_roll(atk: int, df: int, spread: int = 2) -> int:
    raw = atk + random.randint(0, spread) - df
    return max(1, raw)

def ability_description(class_name: str) -> str:
    if class_name == "‚öîÔ∏è –í–æ–∏–Ω":
        return "–ú–æ—â–Ω—ã–π —É–¥–∞—Ä: –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –±–æ–π."
    if class_name == "üßô –ú–∞–≥":
        return "–û–≥–Ω–µ–Ω–Ω–∞—è –≤—Å–ø—ã—à–∫–∞: 15 —á–∏—Å—Ç–æ–≥–æ —É—Ä–æ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –±–æ–π."
    if class_name == "üïµÔ∏è –í–æ—Ä":
        return "–¢–µ–Ω–µ–≤–∞—è –∞—Ç–∞–∫–∞: —É–¥–∞—Ä, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–∏–π –∑–∞—â–∏—Ç—É, –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –±–æ–π."
    return ""

# ----------------------------- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ -------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    player = ensure_player(user.id, user.first_name or "–ì–µ—Ä–æ–π")

    if player["class"] is None:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {player['name']}! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å:",
            reply_markup=CLASS_KB
        )
        context.user_data["state"] = "choose_class"
    else:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {player['name']} ({player['class']})!\n"
            f"–¢–≤–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_description(player['class'])}\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=MAIN_KB
        )
        context.user_data["state"] = "idle"

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n"
        "/status ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
        "/inventory ‚Äî –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
        "/use_potion ‚Äî –≤—ã–ø–∏—Ç—å –º–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è\n"
        "/adventure ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ (—Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)\n"
        "/quests ‚Äî –∫–≤–µ—Å—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/shop ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞."
    )
    await update.message.reply_text(text, reply_markup=MAIN_KB)

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    text = (
        f"üìä –°—Ç–∞—Ç—É—Å {p['name']} ({p['class'] or '–ë–µ–∑ –∫–ª–∞—Å—Å–∞'})\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {p['level']} ({p['xp']}/{get_xp_to_next(p['level'])} XP)\n"
        f"HP: {p['hp']}/{p['max_hp']}\n"
        f"–ê—Ç–∞–∫–∞: {p['attack']} –ó–∞—â–∏—Ç–∞: {p['defense']}\n"
        f"–ó–æ–ª–æ—Ç–æ: {p['gold']}\n"
        f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_description(p['class']) if p['class'] else '-'}"
    )
    await update.message.reply_text(text, reply_markup=MAIN_KB)

async def inventory_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    if not p["inventory"]:
        await update.message.reply_text("–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", reply_markup=MAIN_KB)
        return
    lines = ["üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:"]
    for item, cnt in p["inventory"].items():
        lines.append(f"- {item} x{cnt}")
    lines.append("\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ø—Ä–æ–±—É–π /use_potion, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ.")
    await update.message.reply_text("\n".join(lines), reply_markup=MAIN_KB)

async def use_potion_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    item = "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"
    if p["hp"] >= p["max_hp"]:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–ª–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.")
        return
    if consume_item(p, item, 1):
        healed = heal_player(p, 35)
        await update.message.reply_text(f"–¢—ã –≤—ã–ø–∏–ª –∑–µ–ª—å–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {healed} HP. –¢–µ–∫—É—â–µ–µ HP: {p['hp']}/{p['max_hp']}")
    else:
        await update.message.reply_text("–ù–µ—Ç –ú–∞–ª—ã—Ö –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")

async def quests_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    q = p["quests"]
    if not q:
        await update.message.reply_text("–ö–≤–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=MAIN_KB)
        return
    lines = ["üßæ –ö–≤–µ—Å—Ç—ã:"]
    for key, quest in q.items():
        lines.append(
            f"- {quest['title']} [{quest['status']}]: {quest['progress']}/{quest['required']} ‚Äî {quest['desc']}"
        )
    await update.message.reply_text("\n".join(lines), reply_markup=MAIN_KB)

# ----------------------------- –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è/–°–æ–±—ã—Ç–∏—è ---------------------------

def build_battle_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data="battle:attack"),
         InlineKeyboardButton("‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", callback_data="battle:ability")],
        [InlineKeyboardButton("üß™ –ó–µ–ª—å–µ", callback_data="battle:potion"),
         InlineKeyboardButton("üèÉ –ë–µ–≥", callback_data="battle:run")],
    ])

def build_shop_kb() -> InlineKeyboardMarkup:
    buttons = []
    for item_name, meta in SHOP_ITEMS.items():
        buttons.append([InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å: {item_name} ({meta['price']}üí∞)", callback_data=f"shop:buy:{item_name}")])
    buttons.append([InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="shop:close")])
    return InlineKeyboardMarkup(buttons)

def battle_text(player: Dict[str, Any], enemy: Dict[str, Any], log: str = "") -> str:
    return (
        f"‚öîÔ∏è –ë–æ–π: {enemy['name']}\n"
        f"–í—Ä–∞–≥ HP: {enemy['hp']}/{enemy['max_hp']}\n"
        f"–¢—ã HP: {player['hp']}/{player['max_hp']}\n"
        f"–ê—Ç–∞–∫–∞/–ó–∞—â–∏—Ç–∞: {player['attack']}/{player['defense']}\n\n"
        f"{log}"
    )

async def adventure_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_adventure = context.user_data.get("last_adventure")
    if last_adventure:
        cooldown = 30  # 30 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω–∞
        elapsed = (datetime.now() - last_adventure).total_seconds()
        if elapsed < cooldown:
            remaining = int(cooldown - elapsed)
            await update.message.reply_text(
                f"–¢—ã —É—Å—Ç–∞–ª –∏ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º. –û—Ç–¥–æ—Ö–Ω–∏ –µ—â—ë {remaining} —Å–µ–∫—É–Ω–¥.",
                reply_markup=MAIN_KB
            )
            return
    
    p = players[uid]
    context.user_data["last_adventure"] = datetime.now()
    
    event = random.choice(["fight", "gold", "item", "merchant"])
    if event == "fight":
        enemy = generate_enemy(p["level"])
        context.user_data["battle"] = {
            "enemy": enemy,
            "ability_used": False,
            "message_id": None,
            "chat_id": update.effective_chat.id,
        }
        msg = await update.message.reply_text(
            battle_text(p, enemy, "–ù–∞ —Ç–µ–±—è –Ω–∞–ø–∞–¥–∞–µ—Ç –≤—Ä–∞–≥! –ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?"),
            reply_markup=build_battle_kb()
        )
        context.user_data["battle"]["message_id"] = msg.message_id
    elif event == "gold":
        gain = random.randint(10, 25)
        p["gold"] += gain
        save_players()
        await update.message.reply_text(f"–¢—ã –Ω–∞—à—ë–ª –º–µ—à–æ—á–µ–∫ –∑–æ–ª–æ—Ç–∞: +{gain} üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {p['gold']} –∑–æ–ª–æ—Ç–∞.")
    elif event == "item":
        item = random.choice(list(SHOP_ITEMS.keys()))
        add_item(p, item, 1)
        await update.message.reply_text(f"–¢—ã –Ω–∞—à—ë–ª –ø—Ä–µ–¥–º–µ—Ç: {item}! –û–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")
    elif event == "merchant":
        await update.message.reply_text("–¢–µ–±–µ –ø–æ–≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —Å—Ç—Ä–∞–Ω—Å—Ç–≤—É—é—â–∏–π —Ç–æ—Ä–≥–æ–≤–µ—Ü:", reply_markup=build_shop_kb())


async def shop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–õ–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—Ü–∞:", reply_markup=build_shop_kb())

async def shop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    if uid not in players:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    data = query.data # shop:buy:ITEM or shop:close

    if data == "shop:close":
        await query.edit_message_text("–¢–æ—Ä–≥–æ–≤–µ—Ü —É—Ö–æ–¥–∏—Ç –≤ —Ç—É–º–∞–Ω...")
        return

    _, action, item_name = data.split(":", 2)
    if action == "buy":
        if item_name not in SHOP_ITEMS:
            await query.edit_message_text("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç.")
            return
        price = SHOP_ITEMS[item_name]["price"]
        if p["gold"] < price:
            await query.edit_message_text(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞. –ù—É–∂–Ω–æ {price}üí∞, —É —Ç–µ–±—è {p['gold']}üí∞.")
            return

        p["gold"] -= price
        effect = SHOP_ITEMS[item_name]["effect"]
        # –ü—Ä–µ–¥–º–µ—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É, –∫—Ä–æ–º–µ –∑–µ–ª–∏–π ‚Äî –æ–Ω–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if "heal" in effect and SHOP_ITEMS[item_name]["type"] == "consumable" and item_name == "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è":
            add_item(p, item_name, 1)
            await query.edit_message_text(f"–¢—ã –∫—É–ø–∏–ª: {item_name}. –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –ó–æ–ª–æ—Ç–æ: {p['gold']}.")
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–∞—Ñ—ã
            if "attack_plus" in effect:
                p["attack"] += effect["attack_plus"]
            if "defense_plus" in effect:
                p["defense"] += effect["defense_plus"]
            save_players()
            await query.edit_message_text(f"–¢—ã –∫—É–ø–∏–ª –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª: {item_name}. –¢–≤–æ—è —Å–∏–ª–∞ —Ä–∞—Å—Ç—ë—Ç! –ó–æ–ª–æ—Ç–æ: {p['gold']}.")

# ----------------------------- –ë–æ–π: callback-–∏ -------------------------------

async def battle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    if uid not in players:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    state = context.user_data.get("battle")
    if not state:
        await query.edit_message_text("–°–µ–π—á–∞—Å —Ç—ã –Ω–µ –≤ –±–æ—é.")
        return

    enemy = state["enemy"]
    action = query.data # battle:attack | battle:ability | battle:potion | battle:run

    log = ""
    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    if action == "battle:attack":
        dmg = dmg_roll(p["attack"], enemy["defense"])
        enemy["hp"] -= dmg
        log += f"–¢—ã –∞—Ç–∞–∫–æ–≤–∞–ª {enemy['name']} –∏ –Ω–∞–Ω—ë—Å {dmg} —É—Ä–æ–Ω–∞.\n"
    elif action == "battle:ability":
        if state.get("ability_used"):
            log += "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º –±–æ—é!\n"
        else:
            cls = p["class"]
            if cls == "‚öîÔ∏è –í–æ–∏–Ω":
                dmg = dmg_roll(p["attack"], enemy["defense"]) * 2
                enemy["hp"] -= dmg
                log += f"–¢—ã –ø—Ä–∏–º–µ–Ω–∏–ª '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä' –∏ –Ω–∞–Ω—ë—Å {dmg} —É—Ä–æ–Ω–∞!\n"
            elif cls == "üßô –ú–∞–≥":
                dmg = 15
                enemy["hp"] -= dmg
                log += f"–¢—ã –ø—Ä–∏–º–µ–Ω–∏–ª '–û–≥–Ω–µ–Ω–Ω–∞—è –≤—Å–ø—ã—à–∫–∞' –∏ –Ω–∞–Ω—ë—Å {dmg} —á–∏—Å—Ç–æ–≥–æ —É—Ä–æ–Ω–∞!\n"
            elif cls == "üïµÔ∏è –í–æ—Ä":
                dmg = max(1, p["attack"] + random.randint(0, 2)) # –∏–≥–Ω–æ—Ä –±—Ä–æ–Ω–∏
                enemy["hp"] -= dmg
                log += f"–¢—ã –ø—Ä–∏–º–µ–Ω–∏–ª '–¢–µ–Ω–µ–≤–∞—è –∞—Ç–∞–∫–∞' –∏ –Ω–∞–Ω—ë—Å {dmg} —É—Ä–æ–Ω–∞ (–∏–≥–Ω–æ—Ä –±—Ä–æ–Ω–∏)!\n"
            else:
                log += "–¢–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –∏–º–µ–µ—Ç –æ—Å–æ–±–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.\n"
            state["ability_used"] = True
    elif action == "battle:potion":
        if consume_item(p, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", 1):
            healed = heal_player(p, 35)
            log += f"–¢—ã –≤—ã–ø–∏–ª –∑–µ–ª—å–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {healed} HP.\n"
        else:
            log += "–£ —Ç–µ–±—è –Ω–µ—Ç –ú–∞–ª—ã—Ö –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è.\n"
    elif action == "battle:run":
        # –®–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–≥
        if random.random() < 0.6:
            await query.edit_message_text("–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª —Å –ø–æ–ª—è –±–æ—è.")
            context.user_data["battle"] = None
            return
        else:
            log += "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!\n"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
    if enemy["hp"] <= 0:
        # –ù–∞–≥—Ä–∞–¥–∞
        loot_text = grant_rewards(p, enemy["xp"], enemy["gold"], enemy.get("loot"))
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
        q = p["quests"].get("rat_hunter")
        quest_text = ""
        if q and q["status"] == "active" and enemy["type"] == q["target_type"]:
            q["progress"] += 1
            if q["progress"] >= q["required"]:
                q["status"] = "completed"
                rew = q["reward"]
                add_text = grant_rewards(p, rew["xp"], rew["gold"], rew["item"])
                quest_text = f"\n‚úÖ –ö–≤–µ—Å—Ç '{q['title']}' –≤—ã–ø–æ–ª–Ω–µ–Ω! {add_text}"
            save_players()
        else:
            quest_text = f"\n–ö–≤–µ—Å—Ç '{q['title']}': –ø—Ä–æ–≥—Ä–µ—Å—Å {q['progress']}/{q['required']}."
            save_players()

        await query.edit_message_text(
            f"–¢—ã –ø–æ–±–µ–¥–∏–ª {enemy['name']}! {loot_text}{quest_text}"
        )
        context.user_data["battle"] = None
        return

    # –•–æ–¥ –≤—Ä–∞–≥–∞ (–µ—Å–ª–∏ –∂–∏–≤)
    if enemy["hp"] > 0 and action != "battle:run":
        edmg = dmg_roll(enemy["attack"], p["defense"])
        p["hp"] -= edmg
        save_players()
        log += f"{enemy['name']} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {edmg} —É—Ä–æ–Ω–∞.\n"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
    if p["hp"] <= 0:
        loss_gold = min(10, p["gold"])
        p["gold"] -= loss_gold
        # –†–µ—Å–ø–∞–≤–Ω: –ø–æ–ª–æ–≤–∏–Ω–∞ HP
        p["hp"] = max(1, p["max_hp"] // 2)
        save_players()
        await query.edit_message_text(
            f"–¢—ã –ø–∞–ª –≤ –±–æ—é... –ü–æ—Ç–µ—Ä—è–Ω–æ {loss_gold} –∑–æ–ª–æ—Ç–∞. "
            f"–¢—ã –ø—Ä–∏—Ö–æ–¥–∏—à—å –≤ —Å–µ–±—è —Å {p['hp']}/{p['max_hp']} HP."
        )
        context.user_data["battle"] = None
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–æ—è
    try:
        await query.edit_message_text(
            battle_text(p, enemy, log),
            reply_markup=build_battle_kb()
        )
    except Exception:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            battle_text(p, enemy, log),
            reply_markup=build_battle_kb()
        )

# ----------------------------- –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞/—Ç–µ–∫—Å—Ç—ã ---------------------------

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    msg = update.message
    user = update.effective_user
    player = ensure_player(user.id, user.first_name or "–ì–µ—Ä–æ–π")

    state = context.user_data.get("state", "idle")

    if state == "choose_class":
        choice = msg.text.strip()
        if choice in CLASS_STATS:
            set_class(player, choice)
            context.user_data["state"] = "idle"
            await msg.reply_text(
                f"–¢—ã –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å {choice}.\n"
                f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_description(choice)}\n"
                f"–£–¥–∞—á–∏ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö!",
                reply_markup=MAIN_KB
            )
        else:
            await msg.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=CLASS_KB)
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if msg.text == "üìä –°—Ç–∞—Ç—É—Å":
        await status_cmd(update, context)
    elif msg.text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        await inventory_cmd(update, context)
    elif msg.text == "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        last_adventure = context.user_data.get("last_adventure")
        if last_adventure:
            cooldown = 30  # 30 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω–∞
            elapsed = (datetime.now() - last_adventure).total_seconds()
            if elapsed < cooldown:
                remaining = int(cooldown - elapsed)
                await msg.reply_text(
                    f"–¢—ã —É—Å—Ç–∞–ª üò• –∏ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º üó∫Ô∏è. –û—Ç–¥–æ—Ö–Ω–∏ –µ—â—ë {remaining} —Å–µ–∫—É–Ω–¥ .",
                    reply_markup=MAIN_KB
                )
                return
        await adventure_cmd(update, context)
    elif msg.text == "üßæ –ö–≤–µ—Å—Ç—ã":
        await quests_cmd(update, context)
    elif msg.text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        await shop_cmd(update, context)
    elif msg.text == "‚öôÔ∏è –ü–æ–º–æ—â—å":
        await help_cmd(update, context)
    else:
        # –ò–≥–Ω–æ—Ä –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞
        await msg.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /help.", reply_markup=MAIN_KB)

# --------------------------------- Main --------------------------------------

def main():
    load_players()
    app = ApplicationBuilder().token("").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("inventory", inventory_cmd))
    app.add_handler(CommandHandler("use_potion", use_potion_cmd))
    app.add_handler(CommandHandler("adventure", adventure_cmd))
    app.add_handler(CommandHandler("quests", quests_cmd))
    app.add_handler(CommandHandler("shop", shop_cmd))

    app.add_handler(CallbackQueryHandler(battle_callback, pattern=r"^battle:"))
    app.add_handler(CallbackQueryHandler(shop_callback, pattern=r"^shop:"))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
