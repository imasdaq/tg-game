# -*- coding: utf-8 -*-
import json
from datetime import datetime, timedelta
import os
import random
from typing import Dict, Any, Optional, List

from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.error import BadRequest
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

DATA_FILE = "game_data.json"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–æ–≤: key = str(user_id), value = dict
players: Dict[str, Dict[str, Any]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∞–Ω–æ–≤: key = str(clan_name), value = dict
clans: Dict[str, Dict[str, Any]] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
CLASS_KB = ReplyKeyboardMarkup(
    [["‚öîÔ∏è –í–æ–∏–Ω", "üßô –ú–∞–≥", "üïµÔ∏è –í–æ—Ä"]],
    one_time_keyboard=True,
    resize_keyboard=True
)
MAIN_KB = ReplyKeyboardMarkup(
    [["üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "üìä –°—Ç–∞—Ç—É—Å"], 
     ["üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üßæ –ö–≤–µ—Å—Ç—ã"], 
     ["üõí –ú–∞–≥–∞–∑–∏–Ω", "üé∞ –ö–∞–∑–∏–Ω–æ"],
     ["üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ"],
     ["‚öîÔ∏è PvP", "üè∞ –ö–ª–∞–Ω—ã"],
     ["üêæ –ü–∏—Ç–æ–º—Ü—ã", "üíº –ë–∏–∑–Ω–µ—Å"],
     ["üí∏ –¢—Ä–∞—Ç—ã", "‚öôÔ∏è –ü–æ–º–æ—â—å"]],
    resize_keyboard=True
)

# ----------------------------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π -----------------------------

async def safe_edit_message_text(query, text: str, parse_mode: Optional[str] = None, reply_markup: Optional[InlineKeyboardMarkup] = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É 'Message is not modified'."""
    try:
        await query.edit_message_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
    except BadRequest as exc:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
        if "Message is not modified" in str(exc):
            return
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        raise

async def safe_edit_message_reply_markup(query, reply_markup: Optional[InlineKeyboardMarkup] = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É 'Message is not modified'."""
    try:
        await query.edit_message_reply_markup(reply_markup=reply_markup)
    except BadRequest as exc:
        if "Message is not modified" in str(exc):
            return
        raise

async def safe_edit_message_by_id(bot, chat_id: int, message_id: int, text: str, parse_mode: Optional[str] = None, reply_markup: Optional[InlineKeyboardMarkup] = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ chat_id/message_id, –∏–≥–Ω–æ—Ä–∏—Ä—É—è 'Message is not modified'."""
    try:
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
    except BadRequest as exc:
        if "Message is not modified" in str(exc):
            return
        raise

# –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Å–æ–≤
CLASS_STATS = {
    "‚öîÔ∏è –í–æ–∏–Ω": {"hp": 110, "attack": 7, "defense": 4, "ability": "–ú–æ—â–Ω—ã–π —É–¥–∞—Ä", "color": "üõ°Ô∏è"},
    "üßô –ú–∞–≥": {"hp": 95, "attack": 9, "defense": 2, "ability": "–û–≥–Ω–µ–Ω–Ω–∞—è –≤—Å–ø—ã—à–∫–∞", "color": "üîÆ"},
    "üïµÔ∏è –í–æ—Ä": {"hp": 100, "attack": 7, "defense": 3, "ability": "–¢–µ–Ω–µ–≤–∞—è –∞—Ç–∞–∫–∞", "color": "üó°Ô∏è"},
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
SHOP_ITEMS = {
    "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è": {"price": 15, "type": "consumable", "effect": {"heal": 35}, "emoji": "üß™"},
    "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è": {"price": 35, "type": "consumable", "effect": {"heal": 70}, "emoji": "üîÆ"},
    "–†—É–Ω–∞ —Å–∏–ª—ã": {"price": 30, "type": "consumable", "effect": {"attack_plus": 1}, "emoji": "‚ö°"},
    "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {"price": 30, "type": "consumable", "effect": {"defense_plus": 1}, "emoji": "üõ°Ô∏è"},
    "–≠–ª–∏–∫—Å–∏—Ä —É–¥–∞—á–∏": {"price": 50, "type": "consumable", "effect": {"luck_plus": 1}, "emoji": "üçÄ"},
    "–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏": {"price": 25, "type": "consumable", "effect": {"escape": True}, "emoji": "üìú"},
    "–ê–º—É–ª–µ—Ç –∑–∞—â–∏—Ç—ã": {"price": 100, "type": "equipment", "effect": {"defense_plus": 2}, "emoji": "üîÆ"},
    "–ú–µ—á –¥—Ä–∞–∫–æ–Ω–∞": {"price": 200, "type": "equipment", "effect": {"attack_plus": 3}, "emoji": "‚öîÔ∏è"},
    # –ü–∏—Ç–æ–º—Ü—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    "üê± –ö–æ—Ç": {"price": 150, "type": "pet", "pet_id": "cat", "emoji": "üê±"},
    "üê∞ –ö—Ä–æ–ª–∏–∫": {"price": 200, "type": "pet", "pet_id": "rabbit", "emoji": "üê∞"},
    "ü¶â –°–æ–≤–∞": {"price": 300, "type": "pet", "pet_id": "owl", "emoji": "ü¶â"},
    "üê∫ –í–æ–ª–∫": {"price": 400, "type": "pet", "pet_id": "wolf", "emoji": "üê∫"},
    "ü¶Ö –§–µ–Ω–∏–∫—Å": {"price": 800, "type": "pet", "pet_id": "phoenix", "emoji": "ü¶Ö"},
    "üêâ –î—Ä–∞–∫–æ–Ω": {"price": 1000, "type": "pet", "pet_id": "dragon", "emoji": "üêâ"},
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –∫–∞–∑–∏–Ω–æ
CASINO_GAMES = {
    "double": {"name": "üéØ –£–¥–≤–æ–µ–Ω–∏–µ", "multiplier": 2, "win_chance": 0.45, "min_bet": 5, "emoji": "üéØ"},
    "dice": {"name": "üé≤ –ö–æ—Å—Ç–∏", "multiplier": 1.5, "win_chance": 0.5, "min_bet": 5, "emoji": "üé≤"},
    "roulette": {"name": "üé° –†—É–ª–µ—Ç–∫–∞", "multiplier": 2, "win_chance": 0.4, "min_bet": 5, "emoji": "üé°"},
    "slots": {"name": "üé∞ –°–ª–æ—Ç—ã", "multiplier": 3, "win_chance": 0.3, "min_bet": 10, "emoji": "üé∞"},
    "blackjack": {"name": "üÉè –ë–ª—ç–∫–¥–∂–µ–∫", "multiplier": 2.5, "win_chance": 0.48, "min_bet": 8, "emoji": "üÉè"},
}

# –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    "first_blood": {"name": "ü©∏ –ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å", "desc": "–ü–æ–±–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞", "reward": {"gold": 20, "xp": 50}},
    "casino_king": {"name": "üëë –ö–æ—Ä–æ–ª—å –∫–∞–∑–∏–Ω–æ", "desc": "–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥", "reward": {"gold": 100, "xp": 200}},
    "rich_player": {"name": "üí∞ –ë–æ–≥–∞—á", "desc": "–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –∑–æ–ª–æ—Ç–∞", "reward": {"gold": 200, "xp": 300}},
    "level_master": {"name": "‚≠ê –ú–∞—Å—Ç–µ—Ä —É—Ä–æ–≤–Ω–µ–π", "desc": "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è", "reward": {"gold": 500, "xp": 1000}},
    "quest_hunter": {"name": "üìú –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–≤–µ—Å—Ç–∞–º–∏", "desc": "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 –∫–≤–µ—Å—Ç–æ–≤", "reward": {"gold": 300, "xp": 400}},
    "pvp_champion": {"name": "üèÜ –ß–µ–º–ø–∏–æ–Ω PvP", "desc": "–ü–æ–±–µ–¥–∏—Ç–µ 20 –∏–≥—Ä–æ–∫–æ–≤", "reward": {"gold": 400, "xp": 500}},
    "pet_lover": {"name": "üêæ –õ—é–±–∏—Ç–µ–ª—å –ø–∏—Ç–æ–º—Ü–µ–≤", "desc": "–ü–æ–ª—É—á–∏—Ç–µ 3 –ø–∏—Ç–æ–º—Ü–∞", "reward": {"gold": 150, "xp": 200}},
    "clan_leader": {"name": "üè∞ –õ–∏–¥–µ—Ä –∫–ª–∞–Ω–∞", "desc": "–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–Ω", "reward": {"gold": 250, "xp": 300}},
    "business_tycoon": {"name": "üè¢ –ë–∏–∑–Ω–µ—Å-–º–∞–≥–Ω–∞—Ç", "desc": "–í–ª–∞–¥–µ–π—Ç–µ 3 –±–∏–∑–Ω–µ—Å–∞–º–∏", "reward": {"gold": 300, "xp": 400}},
    "daily_master": {"name": "üìÖ –ú–∞—Å—Ç–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö", "desc": "–ü–æ–ª—É—á–∏—Ç–µ 7 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –ø–æ–¥—Ä—è–¥", "reward": {"gold": 400, "xp": 600}},
    "casino_professional": {"name": "üé∞ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –∫–∞–∑–∏–Ω–æ", "desc": "–í—ã–∏–≥—Ä–∞–π—Ç–µ 50 –∏–≥—Ä –≤ –∫–∞–∑–∏–Ω–æ", "reward": {"gold": 500, "xp": 800}},
    "inventory_collector": {"name": "üéí –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", "desc": "–°–æ–±–µ—Ä–∏—Ç–µ 10 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "reward": {"gold": 200, "xp": 300}},
}

# –°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
PETS = {
    "dragon": {"name": "üêâ –î—Ä–∞–∫–æ–Ω", "bonus": {"attack": 5, "defense": 3}, "rarity": "legendary", "emoji": "üêâ"},
    "phoenix": {"name": "ü¶Ö –§–µ–Ω–∏–∫—Å", "bonus": {"hp": 50, "heal": 10}, "rarity": "legendary", "emoji": "ü¶Ö"},
    "wolf": {"name": "üê∫ –í–æ–ª–∫", "bonus": {"attack": 3, "speed": 2}, "rarity": "rare", "emoji": "üê∫"},
    "cat": {"name": "üê± –ö–æ—Ç", "bonus": {"luck": 2, "gold": 5}, "rarity": "common", "emoji": "üê±"},
    "owl": {"name": "ü¶â –°–æ–≤–∞", "bonus": {"xp": 10, "wisdom": 1}, "rarity": "rare", "emoji": "ü¶â"},
    "rabbit": {"name": "üê∞ –ö—Ä–æ–ª–∏–∫", "bonus": {"speed": 3, "escape": 1}, "rarity": "common", "emoji": "üê∞"},
}

# –ë–∏–∑–Ω–µ—Å—ã
BUSINESSES = {
    "stall": {"name": "üß∫ –õ–∞—Ä—ë–∫", "price": 50, "income_per_min": 2},
    "shop": {"name": "üè™ –ú–∞–≥–∞–∑–∏–Ω", "price": 800, "income_per_min": 6},
    "farm": {"name": "üåæ –§–µ—Ä–º–∞", "price": 1500, "income_per_min": 12},
    "mine": {"name": "‚õèÔ∏è –®–∞—Ö—Ç–∞", "price": 3000, "income_per_min": 25},
}

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
DAILY_REWARDS = {
    1: {"gold": 10, "xp": 20, "item": "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"},
    2: {"gold": 15, "xp": 25, "item": "–†—É–Ω–∞ —Å–∏–ª—ã"},
    3: {"gold": 20, "xp": 30, "item": "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è"},
    4: {"gold": 25, "xp": 35, "item": "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"},
    5: {"gold": 30, "xp": 40, "item": "–≠–ª–∏–∫—Å–∏—Ä —É–¥–∞—á–∏"},
    6: {"gold": 35, "xp": 45, "item": "–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏"},
    7: {"gold": 50, "xp": 60, "item": "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"},
}

# –ö–ª–∞–Ω—ã
clans: Dict[str, Dict[str, Any]] = {}

# PvP —Å–∏—Å—Ç–µ–º–∞
pvp_requests: Dict[str, Dict[str, Any]] = {}
# –ê–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏: key = duel_id, value = —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—É—ç–ª–∏
active_duels: Dict[str, Dict[str, Any]] = {}
# –ë—ã—Å—Ç—Ä—ã–π –º–∞–ø–ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –∫ –µ–≥–æ –¥—É—ç–ª–∏ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—ë–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
user_to_duel: Dict[str, str] = {}

# –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤
QUESTS = {
    "rat_hunter": {
        "title": "–ö—Ä—ã—Å–æ–ª–æ–≤",
        "desc": "–£–±–µ–π 3 –∫—Ä—ã—Å –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.",
        "target_type": "rat",
        "required": 3,
        "reward": {"xp": 100, "gold": 30, "item": "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"},
    },
    "goblin_slayer": {
        "title": "–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –≥–æ–±–ª–∏–Ω–æ–≤",
        "desc": "–ü–æ–±–µ–¥–∏—Ç–µ 5 –≥–æ–±–ª–∏–Ω–æ–≤.",
        "target_type": "goblin",
        "required": 5,
        "reward": {"xp": 150, "gold": 50, "item": "–†—É–Ω–∞ —Å–∏–ª—ã"},
    },
    "wolf_hunter": {
        "title": "–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –≤–æ–ª–∫–æ–≤",
        "desc": "–£–±–µ–π—Ç–µ 4 –≤–æ–ª–∫–∞.",
        "target_type": "wolf",
        "required": 4,
        "reward": {"xp": 200, "gold": 75, "item": "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è"},
    },
    "casino_regular": {
        "title": "–ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π –∫–∞–∑–∏–Ω–æ",
        "desc": "–°—ã–≥—Ä–∞–π—Ç–µ 10 —Ä–∞–∑ –≤ –∫–∞–∑–∏–Ω–æ.",
        "target_type": "casino_plays",
        "required": 10,
        "reward": {"xp": 120, "gold": 100, "item": "–≠–ª–∏–∫—Å–∏—Ä —É–¥–∞—á–∏"},
    },
    "business_owner": {
        "title": "–í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞",
        "desc": "–ö—É–ø–∏—Ç–µ 2 –±–∏–∑–Ω–µ—Å–∞.",
        "target_type": "businesses_owned",
        "required": 2,
        "reward": {"xp": 180, "gold": 150, "item": "–ê–º—É–ª–µ—Ç –∑–∞—â–∏—Ç—ã"},
    },
}

def generate_random_quest(player_level: int) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞"""
    quest_templates = [
        {
            "title": "–°–±–æ—Ä—â–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤",
            "desc": "–ù–∞–π–¥–∏—Ç–µ {amount} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö.",
            "target_type": "items_found",
            "required": lambda level: random.randint(3, 5 + level // 2),
            "reward": lambda level: {"xp": 50 + level * 10, "gold": 20 + level * 5, "item": "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"}
        },
        {
            "title": "–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –º–æ–Ω—Å—Ç—Ä–æ–≤",
            "desc": "–ü–æ–±–µ–¥–∏—Ç–µ {amount} –≤—Ä–∞–≥–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.",
            "target_type": "enemies_killed",
            "required": lambda level: random.randint(5, 8 + level),
            "reward": lambda level: {"xp": 80 + level * 15, "gold": 30 + level * 8, "item": "–†—É–Ω–∞ —Å–∏–ª—ã"}
        },
        {
            "title": "–ó–æ–ª–æ—Ç–æ–∏—Å–∫–∞—Ç–µ–ª—å",
            "desc": "–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ {amount} –∑–æ–ª–æ—Ç–∞.",
            "target_type": "gold_earned",
            "required": lambda level: random.randint(50, 100 + level * 20),
            "reward": lambda level: {"xp": 60 + level * 12, "gold": 40 + level * 10, "item": "–≠–ª–∏–∫—Å–∏—Ä —É–¥–∞—á–∏"}
        }
    ]
    
    template = random.choice(quest_templates)
    required = template["required"](player_level)
    reward = template["reward"](player_level)
    
    return {
        "title": template["title"],
        "desc": template["desc"].format(amount=required),
        "target_type": template["target_type"],
        "required": required,
        "reward": reward
    }

# ----------------------------- –£—Ç–∏–ª–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è -----------------------------

def load_players() -> None:
    global players
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                players = json.load(f)
        except Exception:
            players = {}
    else:
        players = {}
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    migrate_player_data()

def migrate_player_data() -> None:
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    for player_id, player in players.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        if "pets" not in player:
            player["pets"] = []
        if "achievements" not in player:
            player["achievements"] = {}
        if "clan" not in player:
            player["clan"] = None
        if "daily_streak" not in player:
            player["daily_streak"] = 0
        if "last_daily_reward" not in player:
            player["last_daily_reward"] = None
        if "pvp_wins" not in player:
            player["pvp_wins"] = 0
        if "pvp_losses" not in player:
            player["pvp_losses"] = 0
        if "luck" not in player:
            player["luck"] = 0
        if "equipment" not in player:
            player["equipment"] = {}
        if "businesses" not in player:
            player["businesses"] = {}
        if "last_business_claim" not in player:
            player["last_business_claim"] = None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_players()

def save_players() -> None:
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(players, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def save_clans() -> None:
    try:
        with open("clans_data.json", "w", encoding="utf-8") as f:
            json.dump(clans, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def load_clans() -> None:
    global clans
    if os.path.exists("clans_data.json"):
        try:
            with open("clans_data.json", "r", encoding="utf-8") as f:
                clans = json.load(f)
        except Exception:
            clans = {}
    else:
        clans = {}

# ----------------------------- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ --------------------------------

def get_xp_to_next(level: int) -> int:
    # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è: 100, 150, 200, ...
    return 100 + (level - 1) * 50

def ensure_player(user_id: int, name: str) -> Dict[str, Any]:
    uid = str(user_id)
    if uid not in players:
        players[uid] = {
            "name": name,
            "class": None,
            "level": 1,
            "xp": 0,
            "hp": 100,
            "max_hp": 100,
            "attack": 5,
            "defense": 2,
            "gold": 50,  # –£–≤–µ–ª–∏—á–∏–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–æ–ª–æ—Ç–æ
            "inventory": {"–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è": 2},
            "quests": {},
            "last_casino_play": None,
            "achievements": {},
            "pets": [],
            "clan": None,
            "daily_reward_claimed": False,
            "last_daily_reward": None,
            "pvp_wins": 0,
            "pvp_losses": 0,
            "luck": 0,
            "equipment": {},
        }
        save_players()
    return players[uid]

def check_achievements(player: Dict[str, Any], action: str, value: Any = None) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    earned = []
    
    if action == "first_kill" and "first_blood" not in player["achievements"]:
        player["achievements"]["first_blood"] = {"earned": True, "date": datetime.now().isoformat()}
        earned.append("first_blood")
    
    elif action == "casino_win" and "casino_king" not in player["achievements"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 5 –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥
        wins = player.get("casino_wins_streak", 0) + 1
        player["casino_wins_streak"] = wins
        if wins >= 5:
            player["achievements"]["casino_king"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("casino_king")
    
    elif action == "gold_check" and "rich_player" not in player["achievements"]:
        if player["gold"] >= 1000:
            player["achievements"]["rich_player"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("rich_player")
    
    elif action == "level_check" and "level_master" not in player["achievements"]:
        if player["level"] >= 10:
            player["achievements"]["level_master"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("level_master")
    
    elif action == "quest_complete" and "quest_hunter" not in player["achievements"]:
        completed_quests = sum(1 for q in player["quests"].values() if q.get("status") == "completed")
        if completed_quests >= 10:
            player["achievements"]["quest_hunter"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("quest_hunter")
    
    elif action == "pvp_win" and "pvp_champion" not in player["achievements"]:
        if player["pvp_wins"] >= 20:
            player["achievements"]["pvp_champion"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("pvp_champion")
    
    elif action == "pet_obtained" and "pet_lover" not in player["achievements"]:
        if len(player["pets"]) >= 3:
            player["achievements"]["pet_lover"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("pet_lover")
    
    elif action == "pet_check" and "pet_lover" not in player["achievements"]:
        if len(player["pets"]) >= 3:
            player["achievements"]["pet_lover"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("pet_lover")
    
    elif action == "clan_created" and "clan_leader" not in player["achievements"]:
        player["achievements"]["clan_leader"] = {"earned": True, "date": datetime.now().isoformat()}
        earned.append("clan_leader")
    
    # –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    elif action == "business_check" and "business_tycoon" not in player["achievements"]:
        if len(player.get("businesses", {})) >= 3:
            player["achievements"]["business_tycoon"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("business_tycoon")
    
    elif action == "daily_check" and "daily_master" not in player["achievements"]:
        if player.get("daily_streak", 0) >= 7:
            player["achievements"]["daily_master"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("daily_master")
    
    elif action == "casino_total_wins" and "casino_professional" not in player["achievements"]:
        total_wins = player.get("casino_total_wins", 0) + 1
        player["casino_total_wins"] = total_wins
        if total_wins >= 50:
            player["achievements"]["casino_professional"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("casino_professional")
    
    elif action == "inventory_check" and "inventory_collector" not in player["achievements"]:
        unique_items = len(player.get("inventory", {}))
        if unique_items >= 10:
            player["achievements"]["inventory_collector"] = {"earned": True, "date": datetime.now().isoformat()}
            earned.append("inventory_collector")
    
    if earned:
        save_players()
    
    return earned

def grant_achievement_rewards(player: Dict[str, Any], achievement_id: str) -> str:
    """–í—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
    if achievement_id in ACHIEVEMENTS:
        reward = ACHIEVEMENTS[achievement_id]["reward"]
        player["gold"] += reward.get("gold", 0)
        player["xp"] += reward.get("xp", 0)
        if "item" in reward:
            add_item(player, reward["item"], 1)
        save_players()
        return f"üèÜ +{reward.get('gold', 0)}üí∞ +{reward.get('xp', 0)}XP"
    return ""

def get_pet_bonuses(player: Dict[str, Any]) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å—ã –æ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤"""
    bonuses = {"attack": 0, "defense": 0, "hp": 0, "luck": 0, "gold": 0, "xp": 0}
    
    pets = player.get("pets", [])
    for pet_id in pets:
        if pet_id in PETS:
            pet = PETS[pet_id]
            for stat, bonus in pet["bonus"].items():
                bonuses[stat] = bonuses.get(stat, 0) + bonus
    
    return bonuses

def get_player_stats_with_pets(player: Dict[str, Any]) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤"""
    bonuses = get_pet_bonuses(player)
    
    stats = {
        "attack": player["attack"] + bonuses["attack"],
        "defense": player["defense"] + bonuses["defense"],
        "hp": player["hp"],
        "max_hp": player["max_hp"] + bonuses["hp"],
        "luck": player.get("luck", 0) + bonuses["luck"]
    }
    
    return stats

def can_claim_daily_reward(player: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É"""
    if not player.get("last_daily_reward"):
        return True
    
    last_claim = datetime.fromisoformat(player["last_daily_reward"])
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
    return (now - last_claim).total_seconds() >= 86400

def get_daily_streak(player: Dict[str, Any]) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥"""
    return player.get("daily_streak", 0)

def claim_daily_reward(player: Dict[str, Any]) -> Dict[str, Any]:
    """–í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É"""
    if not can_claim_daily_reward(player):
        return {"success": False, "message": "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ –∑–∞–≤—Ç—Ä–∞!"}
    
    streak = get_daily_streak(player) + 1
    if streak > 7:
        streak = 1  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É
    
    reward = DAILY_REWARDS.get(streak, DAILY_REWARDS[1])
    
    player["gold"] += reward["gold"]
    player["xp"] += reward["xp"]
    player["daily_streak"] = streak
    player["last_daily_reward"] = datetime.now().isoformat()
    
    if "item" in reward:
        add_item(player, reward["item"], 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    check_achievements(player, "daily_check")
    check_achievements(player, "inventory_check")
    
    save_players()
    
    return {
        "success": True,
        "message": f"üéÅ –î–µ–Ω—å {streak}/7: +{reward['gold']}üí∞ +{reward['xp']}XP +{reward['item']}",
        "streak": streak,
        "reward": reward
    }

def create_clan(clan_name: str, leader_id: str, leader_name: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∞–Ω"""
    if clan_name in clans:
        return False
    
    clans[clan_name] = {
        "name": clan_name,
        "leader": leader_id,
        "members": [leader_id],
        "level": 1,
        "xp": 0,
        "created": datetime.now().isoformat(),
        "description": f"–ö–ª–∞–Ω {clan_name}",
        "color": random.choice(["üî¥", "üîµ", "üü¢", "üü°", "üü£", "üü†"])
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–ª–∞–Ω
    players[leader_id]["clan"] = clan_name
    
    save_players()
    save_clans()
    return True

def join_clan(clan_name: str, player_id: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∫–ª–∞–Ω"""
    if clan_name not in clans:
        return False
    
    clan = clans[clan_name]
    if player_id in clan["members"]:
        return False
    
    if len(clan["members"]) >= 20:  # –ú–∞–∫—Å–∏–º—É–º 20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        return False
    
    clan["members"].append(player_id)
    players[player_id]["clan"] = clan_name
    
    save_players()
    save_clans()
    return True

def leave_clan(player_id: str) -> bool:
    """–ü–æ–∫–∏–¥–∞–µ—Ç –∫–ª–∞–Ω"""
    if player_id not in players:
        return False
    
    player = players[player_id]
    if not player.get("clan"):
        return False
    
    clan_name = player["clan"]
    if clan_name in clans:
        clan = clans[clan_name]
        if player_id in clan["members"]:
            clan["members"].remove(player_id)
            
            # –ï—Å–ª–∏ –ª–∏–¥–µ—Ä –ø–æ–∫–∏–¥–∞–µ—Ç –∫–ª–∞–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–∏–¥–µ—Ä–∞
            if clan["leader"] == player_id and clan["members"]:
                clan["leader"] = clan["members"][0]
            elif not clan["members"]:
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –∫–ª–∞–Ω
                del clans[clan_name]
    
    player["clan"] = None
    save_players()
    save_clans()
    return True

def send_pvp_request(from_id: str, to_id: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ PvP"""
    if from_id == to_id:
        return False
    
    if from_id not in players or to_id not in players:
        return False
    
    request_id = f"{from_id}_{to_id}"
    if request_id in pvp_requests:
        return False
    
    pvp_requests[request_id] = {
        "from_id": from_id,
        "to_id": to_id,
        "timestamp": datetime.now().isoformat(),
        "status": "pending"
    }
    
    return True

def accept_pvp_request(request_id: str) -> bool:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ PvP"""
    if request_id not in pvp_requests:
        return False
    
    request = pvp_requests[request_id]
    if request["status"] != "pending":
        return False
    
    request["status"] = "accepted"
    return True

def decline_pvp_request(request_id: str) -> bool:
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ PvP"""
    if request_id not in pvp_requests:
        return False
    
    del pvp_requests[request_id]
    return True

def set_class(player: Dict[str, Any], class_name: str) -> None:
    stats = CLASS_STATS[class_name]
    player["class"] = class_name
    player["max_hp"] = stats["hp"]
    player["hp"] = stats["hp"]
    player["attack"] = stats["attack"]
    player["defense"] = stats["defense"]
    
    # –ë–æ–Ω—É—Å—ã –ø–∏—Ç–æ–º—Ü–µ–≤ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    
    # –í—ã–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç
    if "rat_hunter" not in player["quests"]:
        player["quests"]["rat_hunter"] = {
            "title": "–ö—Ä—ã—Å–æ–ª–æ–≤",
            "desc": "–£–±–µ–π 3 –∫—Ä—ã—Å –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.",
            "target_type": "rat",
            "required": 3,
            "progress": 0,
            "status": "active",
            "reward": {"xp": 100, "gold": 30, "item": "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"},
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    check_achievements(player, "level_check")
    check_achievements(player, "gold_check")
    
    save_players()

def add_item(player: Dict[str, Any], item_name: str, count: int = 1) -> None:
    inv = player["inventory"]
    inv[item_name] = inv.get(item_name, 0) + count
    save_players()

def consume_item(player: Dict[str, Any], item_name: str, count: int = 1) -> bool:
    inv = player["inventory"]
    if inv.get(item_name, 0) >= count:
        inv[item_name] -= count
        if inv[item_name] <= 0:
            del inv[item_name]
        save_players()
        return True
    return False

def heal_player(player: Dict[str, Any], amount: int) -> int:
    before = player["hp"]
    player["hp"] = min(player["max_hp"], player["hp"] + amount)
    save_players()
    return player["hp"] - before

def grant_rewards(player: Dict[str, Any], xp: int, gold: int, loot: Optional[str] = None) -> str:
    player["xp"] += xp
    player["gold"] += gold
    loot_text = ""
    if loot:
        add_item(player, loot, 1)
        loot_text = f"\n–î–æ–±—ã—á–∞: {loot}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    earned_achievements = []
    earned_achievements.extend(check_achievements(player, "first_kill"))
    earned_achievements.extend(check_achievements(player, "gold_check"))
    earned_achievements.extend(check_achievements(player, "level_check"))
    
    level_up_text = check_level_up(player)
    
    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievement_text = ""
    for achievement_id in earned_achievements:
        reward_text = grant_achievement_rewards(player, achievement_id)
        achievement_text += f"\nüèÜ {ACHIEVEMENTS[achievement_id]['name']}: {reward_text}"
    
    save_players()
    return f"+{xp} XP, +{gold} –∑–æ–ª–æ—Ç–∞.{loot_text}{level_up_text}{achievement_text}"

def update_quests_on_enemy_kill(player: Dict[str, Any], enemy_type: str) -> str:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –≤—Ä–∞–≥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏."""
    if not player or "quests" not in player:
        return ""

    updates: List[str] = []
    changed: bool = False

    for quest in player["quests"].values():
        if quest.get("status") != "active":
            continue

        target_type = quest.get("target_type")
        if target_type in (enemy_type, "enemies_killed"):
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            quest["progress"] = int(quest.get("progress", 0)) + 1
            changed = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            required = int(quest.get("required", 0))
            if required and quest["progress"] >= required:
                quest["status"] = "completed"
                rew = quest.get("reward", {})
                add_text = grant_rewards(
                    player,
                    int(rew.get("xp", 0)),
                    int(rew.get("gold", 0)),
                    rew.get("item")
                )
                # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∫–≤–µ—Å—Ç—ã
                check_achievements(player, "quest_complete")
                updates.append(f"\n‚úÖ –ö–≤–µ—Å—Ç '{quest.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' –≤—ã–ø–æ–ª–Ω–µ–Ω! {add_text}")
            else:
                updates.append(
                    f"\n–ö–≤–µ—Å—Ç '{quest.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}': –ø—Ä–æ–≥—Ä–µ—Å—Å {quest.get('progress', 0)}/{quest.get('required', 0)}."
                )

    if changed:
        save_players()

    return "".join(updates)

def check_level_up(player: Dict[str, Any]) -> str:
    text = ""
    while player["xp"] >= get_xp_to_next(player["level"]):
        player["xp"] -= get_xp_to_next(player["level"])
        player["level"] += 1
        # –†–æ—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        player["max_hp"] += 8
        player["attack"] += 1
        if player["level"] % 2 == 0:
            player["defense"] += 1
        player["hp"] = player["max_hp"]
        text += f"\nüî∫ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å {player['level']} —É—Ä–æ–≤–µ–Ω—å. HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
    if text:
        save_players()
    return text

def generate_enemy(level: int) -> Dict[str, Any]:
    # –¢–∏–ø—ã –≤—Ä–∞–≥–æ–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    enemy_types = [
        {"type": "rat", "name": "–ö—Ä—ã—Å–∞", "hp": 30, "attack": 4, "defense": 1, "xp": 25, "gold": (5, 10), "loot": [None, None, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"]},
        {"type": "goblin", "name": "–ì–æ–±–ª–∏–Ω", "hp": 45, "attack": 6, "defense": 2, "xp": 40, "gold": (8, 18), "loot": [None, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "–†—É–Ω–∞ —Å–∏–ª—ã"]},
        {"type": "wolf", "name": "–í–æ–ª–∫", "hp": 55, "attack": 7, "defense": 3, "xp": 55, "gold": (10, 20), "loot": [None, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"]},
    ]
    base = random.choice(enemy_types)
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é
    scale = max(0, level - 1)
    enemy = {
        "type": base["type"],
        "name": base["name"],
        "hp": base["hp"] + 5 * scale,
        "max_hp": base["hp"] + 5 * scale,
        "attack": base["attack"] + scale * 2,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞—Ç–∞–∫—É —Å–∏–ª—å–Ω–µ–µ
        "defense": base["defense"] + (scale // 2),
        "xp": base["xp"] + 10 * scale,
        "gold": random.randint(*base["gold"]) + 2 * scale,
        "loot": random.choice(base["loot"]),
    }
    return enemy

def dmg_roll(atk: int, df: int, spread: int = 2) -> int:
    # –£—Ä–æ–Ω —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –∞—Ç–∞–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π
    raw = atk + random.randint(0, spread) - max(0, df - 2)  # –ó–∞—â–∏—Ç–∞ —É–º–µ–Ω—å—à–∞–µ—Ç —É—Ä–æ–Ω, –Ω–æ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2
    return max(1, raw)

def ability_description(class_name: str) -> str:
    if class_name == "‚öîÔ∏è –í–æ–∏–Ω":
        return "–ú–æ—â–Ω—ã–π —É–¥–∞—Ä: –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –±–æ–π."
    if class_name == "üßô –ú–∞–≥":
        return "–û–≥–Ω–µ–Ω–Ω–∞—è –≤—Å–ø—ã—à–∫–∞: 15 —á–∏—Å—Ç–æ–≥–æ —É—Ä–æ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –±–æ–π."
    if class_name == "üïµÔ∏è –í–æ—Ä":
        return "–¢–µ–Ω–µ–≤–∞—è –∞—Ç–∞–∫–∞: —É–¥–∞—Ä, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–∏–π –∑–∞—â–∏—Ç—É, –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –±–æ–π."
    return ""

def build_battle_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data="battle:attack"),
         InlineKeyboardButton("‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", callback_data="battle:ability")],
        [InlineKeyboardButton("üß™ –ó–µ–ª—å–µ", callback_data="battle:potion"),
         InlineKeyboardButton("üèÉ –ë–µ–≥", callback_data="battle:run")],
    ])

def build_shop_kb(player: Dict[str, Any] = None) -> InlineKeyboardMarkup:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–æ–π"""
    buttons = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    consumables = []
    equipment = []
    pets = []
    
    for item_name, meta in SHOP_ITEMS.items():
        emoji = meta.get("emoji", "üì¶")
        price = meta['price']
        item_type = meta["type"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        inventory_count = 0
        if player:
            inventory_count = player["inventory"].get(item_name, 0)
        
        if item_type == "consumable":
            consumables.append((item_name, meta, inventory_count))
        elif item_type == "equipment":
            equipment.append((item_name, meta, inventory_count))
        elif item_type == "pet":
            pets.append((item_name, meta, inventory_count))
    
    # –ü–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    if consumables:
        buttons.append([InlineKeyboardButton("üß™ –ü–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="shop:category:consumable")])
        for item_name, meta, count in consumables:
            emoji = meta.get("emoji", "üì¶")
            price = meta['price']
            buttons.append([InlineKeyboardButton(
                f"{emoji} {item_name} ({price}üí∞) x{count}",
                callback_data=f"shop:buy:{item_name}"
            )])
    
    # –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
    if equipment:
        buttons.append([InlineKeyboardButton("‚öîÔ∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", callback_data="shop:category:equipment")])
        for item_name, meta, count in equipment:
            emoji = meta.get("emoji", "üì¶")
            price = meta['price']
            buttons.append([InlineKeyboardButton(
                f"{emoji} {item_name} ({price}üí∞) x{count}",
                callback_data=f"shop:buy:{item_name}"
            )])
    
    # –ü–∏—Ç–æ–º—Ü—ã
    if pets:
        buttons.append([InlineKeyboardButton("üêæ –ü–∏—Ç–æ–º—Ü—ã", callback_data="shop:category:pet")])
        for item_name, meta, count in pets:
            emoji = meta.get("emoji", "üì¶")
            price = meta['price']
            pet_id = meta["pet_id"]
            
            if player and pet_id in player.get("pets", []):
                buttons.append([InlineKeyboardButton(f"{emoji} {item_name} ‚úÖ (–£–∂–µ –µ—Å—Ç—å)", callback_data="shop:already_owned")])
            else:
                buttons.append([InlineKeyboardButton(f"{emoji} {item_name} ({price}üí∞)", callback_data=f"shop:buy:{item_name}")])
    
    # –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    buttons.append([InlineKeyboardButton("üõí –ú–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞", callback_data="shop:bulk")])
    buttons.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="shop:balance")])
    buttons.append([InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="shop:close")])
    
    return InlineKeyboardMarkup(buttons)

def build_bulk_shop_kb(player: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏"""
    buttons = []
    
    # –¢–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    for item_name, meta in SHOP_ITEMS.items():
        if meta["type"] == "consumable":
            emoji = meta.get("emoji", "üì¶")
            price = meta['price']
            inventory_count = player["inventory"].get(item_name, 0)
            
            buttons.append([InlineKeyboardButton(
                f"{emoji} {item_name} x{inventory_count}",
                callback_data=f"shop:bulk:{item_name}"
            )])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="shop:back")])
    return InlineKeyboardMarkup(buttons)

def get_business_income_info(player: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–µ –æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤"""
    owned = player.get("businesses", {})
    total_income_per_min = 0
    total_income_per_hour = 0
    business_details = []
    
    for biz_id, meta in owned.items():
        if biz_id in BUSINESSES:
            base_income = BUSINESSES[biz_id]["income_per_min"]
            level = meta.get("level", 1)
            income_per_min = base_income * level
            income_per_hour = income_per_min * 60
            
            total_income_per_min += income_per_min
            total_income_per_hour += income_per_hour
            
            business_details.append({
                "id": biz_id,
                "name": BUSINESSES[biz_id]["name"],
                "level": level,
                "income_per_min": income_per_min,
                "income_per_hour": income_per_hour,
                "upgrade_cost": int(BUSINESSES[biz_id]["price"] * 0.5)
            })
    
    return {
        "total_per_min": total_income_per_min,
        "total_per_hour": total_income_per_hour,
        "businesses": business_details
    }

def get_time_until_next_daily(player: Dict[str, Any]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
    if not player.get("last_daily_reward"):
        return "–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å!"
    
    last_claim = datetime.fromisoformat(player["last_daily_reward"])
    now = datetime.now()
    time_diff = timedelta(hours=24) - (now - last_claim)
    
    if time_diff.total_seconds() <= 0:
        return "–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å!"
    
    hours = int(time_diff.total_seconds() // 3600)
    minutes = int((time_diff.total_seconds() % 3600) // 60)
    
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    else:
        return f"{minutes}–º"

def build_businesses_kb(player: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–∏–∑–Ω–µ—Å–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    buttons = []
    owned = player.get("businesses", {})
    income_info = get_business_income_info(player)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    total_income = income_info["total_per_min"]
    buttons.append([InlineKeyboardButton(
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income}/–º–∏–Ω ({income_info['total_per_hour']}/—á–∞—Å)",
        callback_data="biz:info"
    )])
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å—ã
    for biz_id, meta in BUSINESSES.items():
        name = meta["name"]
        price = meta["price"]
        income = meta["income_per_min"]
        
        if biz_id in owned:
            level = owned[biz_id].get("level", 1)
            current_income = income * level
            upgrade_cost = int(price * 0.5)
            buttons.append([InlineKeyboardButton(
                f"{name} ‚úÖ —É—Ä.{level} ({current_income}/–º–∏–Ω) üí∞{upgrade_cost}",
                callback_data=f"biz:upgrade:{biz_id}"
            )])
        else:
            buttons.append([InlineKeyboardButton(
                f"{name} ‚Äî {price}üí∞ ({income}/–º–∏–Ω)",
                callback_data=f"biz:buy:{biz_id}"
            )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append([InlineKeyboardButton("üì• –ó–∞–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥", callback_data="biz:claim")])
    buttons.append([InlineKeyboardButton("‚ûï –£–ª—É—á—à–∏—Ç—å –≤—Å–µ (x2 –¥–æ—Ö–æ–¥)", callback_data="biz:upgrade_all")])
    buttons.append([InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data="biz:details")])
    buttons.append([InlineKeyboardButton("üö™ –ó–∞–∫—Ä—ã—Ç—å", callback_data="biz:close")])
    
    return InlineKeyboardMarkup(buttons)

def battle_text(player: Dict[str, Any], enemy: Dict[str, Any], log: str = "") -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤
    stats_with_pets = get_player_stats_with_pets(player)
    
    return (
        f"‚öîÔ∏è –ë–æ–π: {enemy['name']}\n"
        f"–í—Ä–∞–≥ HP: {enemy['hp']}/{enemy['max_hp']}\n"
        f"–¢—ã HP: {stats_with_pets['hp']}/{stats_with_pets['max_hp']}\n"
        f"–ê—Ç–∞–∫–∞/–ó–∞—â–∏—Ç–∞: {stats_with_pets['attack']}/{stats_with_pets['defense']}\n\n"
        f"{log}"
    )

def build_casino_kb(player: Dict[str, Any]) -> InlineKeyboardMarkup:
    buttons = []
    for game_type, game in CASINO_GAMES.items():
        can_play = player["gold"] >= game["min_bet"]
        text = f"{game['name']} (–æ—Ç {game['min_bet']}üí∞)" if can_play else f"{game['name']} ‚ùå"
        callback = f"casino:{game_type}" if can_play else "casino:no_money"
        buttons.append([InlineKeyboardButton(text, callback_data=callback)])
    buttons.append([InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="casino:balance")])
    buttons.append([InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="casino:exit")])
    return InlineKeyboardMarkup(buttons)

def build_casino_games_kb() -> InlineKeyboardMarkup:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–≥—Ä–∞–º–∏ –∫–∞–∑–∏–Ω–æ –∏ –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏"""
    keyboard = []
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
    keyboard.append([InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏", callback_data="casino:quick_bets")])
    
    # –ò–≥—Ä—ã
    for game_id, game_info in CASINO_GAMES.items():
        keyboard.append([InlineKeyboardButton(
            f"{game_info['emoji']} {game_info['name']} ({int(game_info['win_chance'] * 100)}% | x{game_info['multiplier']})",
            callback_data=f"casino:{game_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="casino:balance"),
        InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="casino:change_bet")
    ])
    keyboard.append([
        InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="casino:history"),
        InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="casino:exit")
    ])
    
    return InlineKeyboardMarkup(keyboard)

def build_quick_bets_kb(player: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫"""
    balance = player["gold"]
    keyboard = []
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
    percentages = [10, 25, 50, 75, 100]
    for percent in percentages:
        bet_amount = int(balance * percent / 100)
        if bet_amount >= 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
            keyboard.append([InlineKeyboardButton(
                f"{percent}% = {bet_amount}üí∞",
                callback_data=f"casino:quick_bet:{bet_amount}"
            )])
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
    fixed_bets = [10, 25, 50, 100, 250, 500]
    for bet in fixed_bets:
        if bet <= balance:
            keyboard.append([InlineKeyboardButton(
                f"{bet}üí∞",
                callback_data=f"casino:quick_bet:{bet}"
            )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="casino:back")])
    return InlineKeyboardMarkup(keyboard)

def add_casino_history(player: Dict[str, Any], game_type: str, bet: int, result: bool, prize: int = 0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∑–∏–Ω–æ"""
    if "casino_history" not in player:
        player["casino_history"] = []
    
    history_entry = {
        "game": game_type,
        "bet": bet,
        "result": result,
        "prize": prize,
        "timestamp": datetime.now().isoformat()
    }
    
    player["casino_history"].append(history_entry)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 –∏–≥—Ä–∞–º–∏
    if len(player["casino_history"]) > 20:
        player["casino_history"] = player["casino_history"][-20:]
    
    save_players()

def get_casino_stats(player: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∑–∏–Ω–æ"""
    history = player.get("casino_history", [])
    
    if not history:
        return {"total_games": 0, "wins": 0, "losses": 0, "winrate": 0, "total_profit": 0}
    
    wins = sum(1 for entry in history if entry["result"])
    losses = len(history) - wins
    total_profit = sum(entry["prize"] - entry["bet"] for entry in history)
    winrate = (wins / len(history)) * 100 if history else 0
    
    return {
        "total_games": len(history),
        "wins": wins,
        "losses": losses,
        "winrate": winrate,
        "total_profit": total_profit
    }

def play_casino_game(player: Dict[str, Any], game_type: str, bet: int) -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ"""
    game = CASINO_GAMES[game_type]
    
    if bet < game["min_bet"]:
        return {"success": False, "message": f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game['min_bet']} –∑–æ–ª–æ—Ç–∞"}
    
    if player["gold"] < bet:
        return {"success": False, "message": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!"}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (—Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥)
    last_play = player.get("last_casino_play")
    if last_play:
        last_play = datetime.fromisoformat(last_play)
        elapsed = (datetime.now() - last_play).total_seconds()
        if elapsed < 30:
            return {"success": False, "message": f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(30 - elapsed)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π"}
    
    player["gold"] -= bet
    player["last_casino_play"] = datetime.now().isoformat()
    
    # –õ–æ–≥–∏–∫–∞ –∏–≥—Ä
    if game_type == "double":
        if random.random() < game["win_chance"]:
            prize = bet * game["multiplier"]
            player["gold"] += prize
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            check_achievements(player, "casino_win")
            check_achievements(player, "casino_total_wins")
            return {"success": True, "message": f"üéâ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä–∞–ª–∏ {prize} –∑–æ–ª–æ—Ç–∞!", "prize": prize}
        return {"success": False, "message": f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à! –ü–æ—Ç–µ—Ä—è–ª–∏ {bet} –∑–æ–ª–æ—Ç–∞."}
    
    elif game_type == "dice":
        player_roll = random.randint(1, 6)
        casino_roll = random.randint(1, 6)
        if player_roll > casino_roll:
            prize = int(bet * game["multiplier"])
            player["gold"] += prize
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            check_achievements(player, "casino_win")
            check_achievements(player, "casino_total_wins")
            return {"success": True, "message": f"üé≤ –í—ã: {player_roll} | –ö–∞–∑–∏–Ω–æ: {casino_roll}\nüèÜ –í—ã–∏–≥—Ä–∞–ª–∏ {prize} –∑–æ–ª–æ—Ç–∞!"}
        elif player_roll == casino_roll:
            player["gold"] += bet
            return {"success": None, "message": f"üé≤ –í—ã: {player_roll} | –ö–∞–∑–∏–Ω–æ: {casino_roll}\nü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."}
        else:
            return {"success": False, "message": f"üé≤ –í—ã: {player_roll} | –ö–∞–∑–∏–Ω–æ: {casino_roll}\nüí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –∑–æ–ª–æ—Ç–∞."}
    
    elif game_type == "roulette":
        number = random.randint(0, 36)
        color = "üî¥" if number % 2 == 1 else "‚ö´" if number != 0 else "üü¢"
        if number == 0:
            return {"success": False, "message": f"üé° –í—ã–ø–∞–ª–æ: {color}0\nüí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –∑–æ–ª–æ—Ç–∞!"}
        elif (color == "üî¥" and random.random() < game["win_chance"]) or (color == "‚ö´" and random.random() < game["win_chance"]):
            prize = bet * game["multiplier"]
            player["gold"] += prize
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            check_achievements(player, "casino_win")
            check_achievements(player, "casino_total_wins")
            return {"success": True, "message": f"üé° –í—ã–ø–∞–ª–æ: {color}{number}\nüéâ –í—ã–∏–≥—Ä–∞–ª–∏ {prize} –∑–æ–ª–æ—Ç–∞!"}
        else:
            return {"success": False, "message": f"üé° –í—ã–ø–∞–ª–æ: {color}{number}\nüí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –∑–æ–ª–æ—Ç–∞."}
    
    elif game_type == "slots":
        symbols = ["üçé", "üçä", "üçá", "üçí", "üíé", "7Ô∏è‚É£"]
        result = [random.choice(symbols) for _ in range(3)]
        if len(set(result)) == 1:  # –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            prize = bet * game["multiplier"]
            player["gold"] += prize
            check_achievements(player, "casino_win")
            check_achievements(player, "casino_total_wins")
            return {"success": True, "message": f"üé∞ {' '.join(result)}\nüéâ –î–ñ–ï–ö–ü–û–¢! –í—ã–∏–≥—Ä–∞–ª–∏ {prize} –∑–æ–ª–æ—Ç–∞!"}
        else:
            return {"success": False, "message": f"üé∞ {' '.join(result)}\nüí∏ –ü—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –∑–æ–ª–æ—Ç–∞."}
    
    elif game_type == "blackjack":
        player_cards = [random.randint(1, 10) for _ in range(2)]
        dealer_cards = [random.randint(1, 10) for _ in range(2)]
        
        player_sum = sum(player_cards)
        dealer_sum = sum(dealer_cards)
        
        if player_sum == 21:
            prize = bet * game["multiplier"]
            player["gold"] += prize
            check_achievements(player, "casino_win")
            check_achievements(player, "casino_total_wins")
            return {"success": True, "message": f"üÉè –ë–ª—ç–∫–¥–∂–µ–∫! –í—ã–∏–≥—Ä–∞–ª–∏ {prize} –∑–æ–ª–æ—Ç–∞!"}
        elif player_sum > 21:
            return {"success": False, "message": f"üÉè –ü–µ—Ä–µ–±–æ—Ä! –ü—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –∑–æ–ª–æ—Ç–∞."}
        elif dealer_sum > 21 or player_sum > dealer_sum:
            prize = int(bet * game["multiplier"])
            player["gold"] += prize
            check_achievements(player, "casino_win")
            check_achievements(player, "casino_total_wins")
            return {"success": True, "message": f"üÉè –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä–∞–ª–∏ {prize} –∑–æ–ª–æ—Ç–∞!"}
        else:
            return {"success": False, "message": f"üÉè –ü—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –∑–æ–ª–æ—Ç–∞."}
    
    save_players()
    return {"success": False, "message": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ"}

# ----------------------------- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ -------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    player = ensure_player(user.id, user.first_name or "–ì–µ—Ä–æ–π")

    if player["class"] is None:
        await update.message.reply_text(
            f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, {player['name']}!</b>\n\n"
            f"üåü –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ:\n\n"
            f"‚öîÔ∏è <b>–í–æ–∏–Ω</b> - –í—ã—Å–æ–∫–æ–µ HP –∏ –∑–∞—â–∏—Ç–∞\n"
            f"üßô <b>–ú–∞–≥</b> - –°–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞ –∏ –º–∞–≥–∏—è\n"
            f"üïµÔ∏è <b>–í–æ—Ä</b> - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n"
            f"üí° –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å!",
            parse_mode="HTML",
            reply_markup=CLASS_KB
        )
        context.user_data["state"] = "choose_class"
    else:
        # –ë–æ–Ω—É—Å—ã –ø–∏—Ç–æ–º—Ü–µ–≤ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        
        await update.message.reply_text(
            f"‚ú® <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {player['name']}!</b>\n\n"
            f"üé≠ –ö–ª–∞—Å—Å: {player['class']}\n"
            f"üí´ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_description(player['class'])}\n"
            f"üí∞ –ó–æ–ª–æ—Ç–æ: {player['gold']}\n"
            f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {player['level']}\n\n"
            f"üéÆ –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=MAIN_KB
        )
        context.user_data["state"] = "idle"

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üéÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "‚öîÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/inventory - –û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n\n"
        "üåç <b>–ò–≥—Ä–æ–≤—ã–µ:</b>\n"
        "/adventure - –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ\n"
        "/quests - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\n"
        "/shop - –ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
        "/casino - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n\n"
        "üèÜ <b>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "/achievements - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
        "/pets - –ü–∏—Ç–æ–º—Ü—ã\n"
        "/clans - –ö–ª–∞–Ω—ã\n"
        "/pvp - PvP –±–æ–∏\n\n"
        "üß™ <b>–ü—Ä–µ–¥–º–µ—Ç—ã:</b>\n"
        "/use_potion - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ\n\n"
        "üõ†Ô∏è <b>–ü—Ä–æ—á–µ–µ:</b>\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/spend - –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —Ç—Ä–∞—Ç–∏—Ç—å –∑–æ–ª–æ—Ç–æ"
    )
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=MAIN_KB)

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤
    stats_with_pets = get_player_stats_with_pets(p)
    pet_bonuses = get_pet_bonuses(p)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–∞—Ö
    business_info = get_business_income_info(p)
    
    # –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    daily_timer = get_time_until_next_daily(p)
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å {p['name']} ({p['class'] or '–ë–µ–∑ –∫–ª–∞—Å—Å–∞'})</b>\n\n"
        f"‚öîÔ∏è –£—Ä–æ–≤–µ–Ω—å: <b>{p['level']}</b> ({p['xp']}/{get_xp_to_next(p['level'])} XP)\n"
        f"‚ù§Ô∏è HP: <b>{stats_with_pets['hp']}/{stats_with_pets['max_hp']}</b>\n"
        f"üó°Ô∏è –ê—Ç–∞–∫–∞: <b>{stats_with_pets['attack']}</b> üõ°Ô∏è –ó–∞—â–∏—Ç–∞: <b>{stats_with_pets['defense']}</b>\n"
        f"üí∞ –ó–æ–ª–æ—Ç–æ: <b>{p['gold']}</b>\n"
        f"üçÄ –£–¥–∞—á–∞: <b>{stats_with_pets['luck']}</b>\n\n"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–∞—Ö
    if business_info["total_per_min"] > 0:
        text += f"üíº <b>–ë–∏–∑–Ω–µ—Å—ã:</b> {business_info['total_per_min']}/–º–∏–Ω ({business_info['total_per_hour']}/—á–∞—Å)\n"
        text += f"üì¶ –í–ª–∞–¥–µ–Ω–∏–π: {len(p.get('businesses', {}))}\n\n"
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    text += f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞:</b> {daily_timer}\n\n"
    
    # –ë–æ–Ω—É—Å—ã –ø–∏—Ç–æ–º—Ü–µ–≤
    if pet_bonuses["attack"] > 0 or pet_bonuses["defense"] > 0 or pet_bonuses["hp"] > 0:
        text += "üêæ <b>–ë–æ–Ω—É—Å—ã –ø–∏—Ç–æ–º—Ü–µ–≤:</b>\n"
        if pet_bonuses["attack"] > 0:
            text += f"üó°Ô∏è –ê—Ç–∞–∫–∞ +{pet_bonuses['attack']}\n"
        if pet_bonuses["defense"] > 0:
            text += f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ +{pet_bonuses['defense']}\n"
        if pet_bonuses["hp"] > 0:
            text += f"‚ù§Ô∏è HP +{pet_bonuses['hp']}\n"
        if pet_bonuses["luck"] > 0:
            text += f"üçÄ –£–¥–∞—á–∞ +{pet_bonuses['luck']}\n"
        text += "\n"
    
    # –ö–ª–∞–Ω
    if p.get("clan"):
        text += f"üè∞ –ö–ª–∞–Ω: <b>{p['clan']}</b>\n\n"
    
    # PvP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if p.get("pvp_wins", 0) > 0 or p.get("pvp_losses", 0) > 0:
        wins = p.get("pvp_wins", 0)
        losses = p.get("pvp_losses", 0)
        total = wins + losses
        winrate = (wins / total * 100) if total > 0 else 0
        text += f"‚öîÔ∏è PvP: {wins}W/{losses}L ({winrate:.1f}%)\n\n"
    
    # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    text += f"‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_description(p['class']) if p['class'] else '-'}"
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=MAIN_KB)

async def achievements_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    earned = p.get("achievements", {})
    
    # –ü–æ–ª—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ migrate_player_data()
    
    if not earned:
        await update.message.reply_text(
            "üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ!",
            parse_mode="HTML",
            reply_markup=MAIN_KB
        )
        return
    
    text = "üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
    for achievement_id, data in earned.items():
        if achievement_id in ACHIEVEMENTS:
            achievement = ACHIEVEMENTS[achievement_id]
            date = datetime.fromisoformat(data["date"]).strftime("%d.%m.%Y")
            text += f"‚úÖ <b>{achievement['name']}</b>\n"
            text += f"üìù {achievement['desc']}\n"
            text += f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {date}\n\n"
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=MAIN_KB)

async def daily_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    can_claim = can_claim_daily_reward(p)
    current_streak = get_daily_streak(p)
    time_until = get_time_until_next_daily(p)
    
    if can_claim:
        result = claim_daily_reward(p)
        
        if result["success"]:
            streak = result["streak"]
            reward = result["reward"]
            
            text = (
                f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
                f"üìÖ –î–µ–Ω—å: {streak}/7\n"
                f"üí∞ –ó–æ–ª–æ—Ç–æ: +{reward['gold']}\n"
                f"‚≠ê XP: +{reward['xp']}\n"
                f"üéí –ü—Ä–µ–¥–º–µ—Ç: {reward['item']}\n\n"
            )
            
            if streak == 7:
                text += "üéâ <b>–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
                text += "–ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–∏–∫–ª."
            else:
                text += f"üî• –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
                text += "–ó–∞—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
        else:
            text = result["message"]
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥—ã
        next_streak = current_streak + 1 if current_streak < 7 else 1
        next_reward = DAILY_REWARDS.get(next_streak, DAILY_REWARDS[1])
        
        text = (
            f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n"
            f"üìÖ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {current_streak}/7\n"
            f"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥—ã: {time_until}\n\n"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–∞–≥—Ä–∞–¥—É
        text += f"üéØ <b>–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (–¥–µ–Ω—å {next_streak}):</b>\n"
        text += f"üí∞ –ó–æ–ª–æ—Ç–æ: +{next_reward['gold']}\n"
        text += f"‚≠ê XP: +{next_reward['xp']}\n"
        text += f"üéí –ü—Ä–µ–¥–º–µ—Ç: {next_reward['item']}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏
        text += "üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏:</b>\n"
        for day in range(1, 8):
            if day <= current_streak:
                text += f"‚úÖ –î–µ–Ω—å {day}: {DAILY_REWARDS[day]['gold']}üí∞ +{DAILY_REWARDS[day]['xp']}XP\n"
            else:
                text += f"‚è≥ –î–µ–Ω—å {day}: {DAILY_REWARDS[day]['gold']}üí∞ +{DAILY_REWARDS[day]['xp']}XP\n"
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=MAIN_KB)

async def pets_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞–º–∏"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    pets = p.get("pets", [])
    
    # –ü–æ–ª—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ migrate_player_data()
    
    if not pets:
        await update.message.reply_text(
            "üêæ <b>–ü–∏—Ç–æ–º—Ü—ã:</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤.\n"
            "–ü–∏—Ç–æ–º—Ü—ã –¥–∞—é—Ç –±–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º!\n\n"
            "üéÅ –ü–æ–ª—É—á–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö –∏–ª–∏ –∫—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
            parse_mode="HTML",
            reply_markup=MAIN_KB
        )
        return
    
    text = "üêæ <b>–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:</b>\n\n"
    for pet_id in pets:
        if pet_id in PETS:
            pet = PETS[pet_id]
            text += f"{pet['emoji']} <b>{pet['name']}</b>\n"
            for stat, bonus in pet["bonus"].items():
                if stat == "attack":
                    text += f"üó°Ô∏è –ê—Ç–∞–∫–∞ +{bonus}\n"
                elif stat == "defense":
                    text += f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ +{bonus}\n"
                elif stat == "hp":
                    text += f"‚ù§Ô∏è HP +{bonus}\n"
                elif stat == "luck":
                    text += f"üçÄ –£–¥–∞—á–∞ +{bonus}\n"
                elif stat == "gold":
                    text += f"üí∞ –ó–æ–ª–æ—Ç–æ +{bonus}\n"
                elif stat == "xp":
                    text += f"‚≠ê XP +{bonus}\n"
            text += f"üìä –†–µ–¥–∫–æ—Å—Ç—å: {pet['rarity'].title()}\n\n"
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=MAIN_KB)

async def clans_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–∞–º–∏"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    
    # –ü–æ–ª—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ migrate_player_data()
    
    if p.get("clan"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
        clan_name = p["clan"]
        if clan_name in clans:
            clan = clans[clan_name]
            text = (
                f"üè∞ <b>–ö–ª–∞–Ω: {clan['name']}</b>\n\n"
                f"üëë –õ–∏–¥–µ—Ä: {players[clan['leader']]['name']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(clan['members'])}/20\n"
                f"üìä –£—Ä–æ–≤–µ–Ω—å: {clan['level']}\n"
                f"‚≠ê XP: {clan['xp']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {clan['description']}\n\n"
            )
            
            if clan["leader"] == uid:
                text += "üëë –í—ã –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞"
            else:
                text += "üë§ –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
            p.pop("clan", None)  # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞–Ω
            save_players()
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤
        if not clans:
            text = (
                "üè∞ <b>–ö–ª–∞–Ω—ã:</b>\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∫–ª–∞–Ω!"
            )
        else:
            text = "üè∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞–Ω—ã:</b>\n\n"
            for clan_name, clan in clans.items():
                text += f"{clan['color']} <b>{clan['name']}</b>\n"
                text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(clan['members'])}/20\n"
                text += f"üëë –õ–∏–¥–µ—Ä: {players[clan['leader']]['name']}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = build_clans_keyboard(p)
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=keyboard)

async def pvp_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """PvP —Å–∏—Å—Ç–µ–º–∞"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    
    # –ü–æ–ª—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ migrate_player_data()
    
    wins = p["pvp_wins"]
    losses = p["pvp_losses"]
    total = wins + losses
    winrate = (wins / max(1, total)) * 100
    
    text = (
        f"‚öîÔ∏è <b>PvP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ –ü–æ–±–µ–¥—ã: {wins}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses}\n"
        f"üìä –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pvp_challenge [ID –∏–≥—Ä–æ–∫–∞] —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å!"
    )
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=MAIN_KB)

def build_pvp_request_kb(duel_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"pvp:accept:{duel_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"pvp:decline:{duel_id}")]
    ])

def build_pvp_cancel_kb(duel_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤", callback_data=f"pvp:challenge_cancel:{duel_id}")]
    ])

def build_pvp_actions_kb(duel_id: str, is_active_turn: bool) -> InlineKeyboardMarkup:
    buttons: List[List[InlineKeyboardButton]] = []
    if is_active_turn:
        buttons.append([
            InlineKeyboardButton("üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data=f"pvp:act:{duel_id}:attack"),
            InlineKeyboardButton("‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", callback_data=f"pvp:act:{duel_id}:ability")
        ])
        buttons.append([
            InlineKeyboardButton("üß™ –ó–µ–ª—å–µ", callback_data=f"pvp:act:{duel_id}:potion"),
            InlineKeyboardButton("üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data=f"pvp:act:{duel_id}:surrender")
        ])
    else:
        buttons.append([
            InlineKeyboardButton("üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data=f"pvp:act:{duel_id}:surrender")
        ])
    return InlineKeyboardMarkup(buttons)

def format_pvp_battle_text(duel_state: Dict[str, Any]) -> str:
    p1_name = duel_state["p1_name"]
    p2_name = duel_state["p2_name"]
    p1_hp = duel_state["p1"]["hp"]
    p2_hp = duel_state["p2"]["hp"]
    p1_max = duel_state["p1"]["max_hp"]
    p2_max = duel_state["p2"]["max_hp"]
    turn_name = p1_name if duel_state["turn"] == "p1" else p2_name
    log_lines = duel_state.get("log", [])[-6:]
    log = "\n".join(log_lines)
    return (
        f"‚öîÔ∏è –î—É—ç–ª—å: {p1_name} vs {p2_name}\n\n"
        f"{p1_name}: {p1_hp}/{p1_max} HP\n"
        f"{p2_name}: {p2_hp}/{p2_max} HP\n\n"
        f"–•–æ–¥: {turn_name}\n\n"
        f"{log}"
    )

def is_in_duel(user_id: str) -> bool:
    return user_id in user_to_duel

async def pvp_challenge_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–æ–≤–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å: /pvp_challenge <user_id>"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pvp_challenge <ID –∏–≥—Ä–æ–∫–∞>")
        return
    to_id_raw = context.args[0]
    try:
        to_id_int = int(to_id_raw)
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞")
        return
    to_id = str(to_id_int)
    if to_id == uid:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è")
        return
    if to_id not in players:
        await update.message.reply_text("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É")
        return
    if is_in_duel(uid) or is_in_duel(to_id):
        await update.message.reply_text("–ö—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ –≤ –¥—É—ç–ª–∏")
        return

    duel_id = f"{uid}_{to_id}_{int(datetime.now().timestamp())}"
    p_from = players[uid]
    p_to = players[to_id]

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    pvp_requests[duel_id] = {
        "from_id": uid,
        "to_id": to_id,
        "timestamp": datetime.now().isoformat(),
        "status": "pending",
        "messages": {}
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        to_msg = await context.bot.send_message(
            chat_id=to_id_int,
            text=(
                f"‚öîÔ∏è –í–∞—Å –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å {p_from['name']} (ID {uid}).\n\n"
                f"–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
            ),
            reply_markup=build_pvp_request_kb(duel_id)
        )
        pvp_requests[duel_id]["messages"]["to"] = {"chat_id": to_msg.chat_id, "message_id": to_msg.message_id}
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤. –í–µ—Ä–æ—è—Ç–Ω–æ, –∏–≥—Ä–æ–∫ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É.")
        pvp_requests.pop(duel_id, None)
        return

    from_msg = await update.message.reply_text(
        f"‚öîÔ∏è –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É {p_to['name']} (ID {to_id}). –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...",
        reply_markup=build_pvp_cancel_kb(duel_id)
    )
    pvp_requests[duel_id]["messages"]["from"] = {"chat_id": from_msg.chat_id, "message_id": from_msg.message_id}

async def start_duel(context: ContextTypes.DEFAULT_TYPE, duel_id: str):
    req = pvp_requests.get(duel_id)
    if not req:
        return
    uid1 = req["from_id"]
    uid2 = req["to_id"]
    p1 = players[uid1]
    p2 = players[uid2]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–µ–≤—ã–µ —Å—Ç–∞—Ç—ã
    s1 = get_player_stats_with_pets(p1)
    s2 = get_player_stats_with_pets(p2)
    duel_state = {
        "id": duel_id,
        "p1_id": uid1,
        "p2_id": uid2,
        "p1_name": p1["name"],
        "p2_name": p2["name"],
        "p1": {"hp": s1["max_hp"], "max_hp": s1["max_hp"], "attack": s1["attack"], "defense": s1["defense"], "ability_used": False},
        "p2": {"hp": s2["max_hp"], "max_hp": s2["max_hp"], "attack": s2["attack"], "defense": s2["defense"], "ability_used": False},
        "turn": random.choice(["p1", "p2"]),
        "log": ["–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!"] ,
        "messages": req.get("messages", {})
    }
    active_duels[duel_id] = duel_state
    user_to_duel[uid1] = duel_id
    user_to_duel[uid2] = duel_id

    text = format_pvp_battle_text(duel_state)
    msgs = duel_state["messages"]
    is_p1_turn = duel_state["turn"] == "p1"
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ–µ–≤–æ–π —ç–∫—Ä–∞–Ω
    await safe_edit_message_by_id(context.bot, msgs["from"]["chat_id"], msgs["from"]["message_id"], text, reply_markup=build_pvp_actions_kb(duel_id, is_p1_turn))
    await safe_edit_message_by_id(context.bot, msgs["to"]["chat_id"], msgs["to"]["message_id"], text, reply_markup=build_pvp_actions_kb(duel_id, not is_p1_turn))

def end_duel(duel_id: str):
    duel = active_duels.pop(duel_id, None)
    if not duel:
        return None
    user_to_duel.pop(duel["p1_id"], None)
    user_to_duel.pop(duel["p2_id"], None)
    pvp_requests.pop(duel_id, None)
    return duel

async def update_duel_messages(context: ContextTypes.DEFAULT_TYPE, duel_state: Dict[str, Any]):
    text = format_pvp_battle_text(duel_state)
    msgs = duel_state["messages"]
    is_p1_turn = duel_state["turn"] == "p1"
    await safe_edit_message_by_id(context.bot, msgs["from"]["chat_id"], msgs["from"]["message_id"], text, reply_markup=build_pvp_actions_kb(duel_state["id"], is_p1_turn))
    await safe_edit_message_by_id(context.bot, msgs["to"]["chat_id"], msgs["to"]["message_id"], text, reply_markup=build_pvp_actions_kb(duel_state["id"], not is_p1_turn))

async def conclude_duel(context: ContextTypes.DEFAULT_TYPE, duel_state: Dict[str, Any], winner: str, loser: str, reason: str = ""):
    p_win = players[winner]
    p_lose = players[loser]
    p_win["pvp_wins"] = p_win.get("pvp_wins", 0) + 1
    p_lose["pvp_losses"] = p_lose.get("pvp_losses", 0) + 1
    # –ù–µ–±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    p_win["gold"] += 50
    p_win["xp"] += 100
    p_lose["xp"] += 20
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    check_achievements(p_win, "pvp_win")
    save_players()

    text = (
        f"üèÅ –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {players[winner]['name']}\n"
        f"–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {players[loser]['name']}\n"
        + (f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n" if reason else "\n")
        + f"–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: +50üí∞, +100XP\n"
        + f"–ü—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É: +20XP"
    )
    msgs = duel_state["messages"]
    # –ó–∞–≤–µ—Ä—à–∞–µ–º: —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await safe_edit_message_by_id(context.bot, msgs["from"]["chat_id"], msgs["from"]["message_id"], text)
    await safe_edit_message_by_id(context.bot, msgs["to"]["chat_id"], msgs["to"]["message_id"], text)
    end_duel(duel_state["id"]) 

async def pvp_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    parts = query.data.split(":")
    if len(parts) < 2:
        return
    action = parts[1]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –¥—É—ç–ª–∏
    if action == "challenge_cancel":
        if len(parts) < 3:
            return
        duel_id = parts[2]
        req = pvp_requests.get(duel_id)
        if not req or req.get("status") != "pending":
            await safe_edit_message_text(query, "‚ö†Ô∏è –í—ã–∑–æ–≤ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω")
            return
        if req["from_id"] != uid:
            await query.answer("–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π", show_alert=True)
            return
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        msgs = req.get("messages", {})
        try:
            if "to" in msgs:
                await safe_edit_message_by_id(context.bot, msgs["to"]["chat_id"], msgs["to"]["message_id"], "–í—ã–∑–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω")
        except Exception:
            pass
        await safe_edit_message_text(query, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–∑–æ–≤")
        pvp_requests.pop(duel_id, None)
        return

    # –ü—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
    if action in ("accept", "decline"):
        if len(parts) < 3:
            return
        duel_id = parts[2]
        req = pvp_requests.get(duel_id)
        if not req or req.get("status") != "pending":
            await safe_edit_message_text(query, "‚ö†Ô∏è –í—ã–∑–æ–≤ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω")
            return
        if uid != req["to_id"]:
            await query.answer("–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –≤–∞–º", show_alert=True)
            return
        if action == "decline":
            # –°–æ–æ–±—â–∞–µ–º –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º
            msgs = req.get("messages", {})
            await safe_edit_message_text(query, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–∑–æ–≤")
            if "from" in msgs:
                await safe_edit_message_by_id(context.bot, msgs["from"]["chat_id"], msgs["from"]["message_id"], "–í–∞—à –≤—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω")
            pvp_requests.pop(duel_id, None)
            return
        # accept
        if is_in_duel(req["from_id"]) or is_in_duel(req["to_id"]):
            await safe_edit_message_text(query, "–ö—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –¥—É—ç–ª–∏")
            return
        req["status"] = "accepted"
        await start_duel(context, duel_id)
        return

    # –î–µ–π—Å—Ç–≤–∏—è –≤ –¥—É—ç–ª–∏
    if action == "act":
        if len(parts) < 4:
            return
        duel_id = parts[2]
        cmd = parts[3]
        duel = active_duels.get(duel_id)
        if not duel:
            await safe_edit_message_text(query, "‚ö†Ô∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return
        is_p1 = uid == duel["p1_id"]
        is_p2 = uid == duel["p2_id"]
        if not (is_p1 or is_p2):
            await query.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –¥—É—ç–ª–∏", show_alert=True)
            return
        turn_key = duel["turn"]
        if (turn_key == "p1" and not is_p1) or (turn_key == "p2" and not is_p2):
            # –†–∞–∑—Ä–µ—à–∏–º —Å–¥–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
            if cmd != "surrender":
                await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥", show_alert=True)
                return
        attacker_key = "p1" if is_p1 else "p2"
        defender_key = "p2" if is_p1 else "p1"
        attacker_id = duel["p1_id"] if is_p1 else duel["p2_id"]
        defender_id = duel["p2_id"] if is_p1 else duel["p1_id"]
        attacker_p = players[attacker_id]
        defender_p = players[defender_id]

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—ã (–∞—Ç–∞–∫–∞/–∑–∞—â–∏—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤ duel state)
        atk_stat = duel[attacker_key]["attack"]
        def_stat = duel[defender_key]["defense"]

        log_add = ""
        if cmd == "attack":
            dmg = dmg_roll(atk_stat, def_stat)
            duel[defender_key]["hp"] = max(0, duel[defender_key]["hp"] - dmg)
            log_add = f"{attacker_p['name']} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {dmg} —É—Ä–æ–Ω–∞."
        elif cmd == "ability":
            if duel[attacker_key]["ability_used"]:
                await query.answer("–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞", show_alert=True)
                return
            cls = attacker_p.get("class")
            if cls == "‚öîÔ∏è –í–æ–∏–Ω":
                dmg = dmg_roll(atk_stat, def_stat) * 2
            elif cls == "üßô –ú–∞–≥":
                dmg = 15
            elif cls == "üïµÔ∏è –í–æ—Ä":
                dmg = max(1, duel[attacker_key]["attack"] + random.randint(0, 2))
            else:
                dmg = dmg_roll(atk_stat, def_stat)
            duel[defender_key]["hp"] = max(0, duel[defender_key]["hp"] - dmg)
            duel[attacker_key]["ability_used"] = True
            log_add = f"{attacker_p['name']} –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –Ω–∞–Ω–æ—Å–∏—Ç {dmg} —É—Ä–æ–Ω–∞!"
        elif cmd == "potion":
            # –ü—å—ë–º –º–∞–ª–æ–µ –∑–µ–ª—å–µ
            if consume_item(attacker_p, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", 1):
                healed = min(35, duel[attacker_key]["max_hp"] - duel[attacker_key]["hp"])
                duel[attacker_key]["hp"] += healed
                log_add = f"{attacker_p['name']} –≤—ã–ø–∏–≤–∞–µ—Ç –∑–µ–ª—å–µ (+{healed} HP)."
            else:
                await query.answer("–ù–µ—Ç –ú–∞–ª—ã—Ö –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è", show_alert=True)
                return
        elif cmd == "surrender":
            duel[attacker_key]["hp"] = 0
            log_add = f"{attacker_p['name']} —Å–¥–∞—ë—Ç—Å—è!"
        else:
            return

        duel.setdefault("log", []).append(log_add)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –¥—É—ç–ª–∏
        if duel[defender_key]["hp"] <= 0 or duel[attacker_key]["hp"] <= 0:
            winner = attacker_id if duel[defender_key]["hp"] <= 0 else defender_id
            loser = defender_id if winner == attacker_id else attacker_id
            await conclude_duel(context, duel, winner, loser, reason=("—Å–¥–∞—á–∞" if cmd == "surrender" else ""))
            return

        # –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –Ω–µ –ª–µ—á–µ–Ω–∏–µ–º? –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –º–µ–Ω—è–µ–º —Ö–æ–¥.
        duel["turn"] = defender_key
        await update_duel_messages(context, duel)
        return

async def inventory_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    if not p["inventory"]:
        await update.message.reply_text("üéí <b>–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.</b>", parse_mode="HTML", reply_markup=MAIN_KB)
        return
    
    items = "\n".join(f"‚ñ™Ô∏è {item} √ó{count}" for item, count in p["inventory"].items())
    await update.message.reply_text(
        f"üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n\n{items}\n\n"
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /use_potion –¥–ª—è –ª–µ—á–µ–Ω–∏—è",
        parse_mode="HTML",
        reply_markup=MAIN_KB
    )

async def use_potion_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    item = "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è"
    if p["hp"] >= p["max_hp"]:
        await update.message.reply_text("‚ù§Ô∏è –£ —Ç–µ–±—è –ø–æ–ª–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ!")
        return
    if consume_item(p, item, 1):
        healed = heal_player(p, 35)
        await update.message.reply_text(f"üß™ –¢—ã –≤—ã–ø–∏–ª –∑–µ–ª—å–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {healed} HP. –¢–µ–ø–µ—Ä—å: {p['hp']}/{p['max_hp']}")
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ú–∞–ª—ã—Ö –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")

async def quests_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    query = getattr(update, "callback_query", None)

    if uid not in players:
        if query:
            await safe_edit_message_text(query, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return

    p = players[uid]
    q = p["quests"]

    if not q:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç
        new_quest = generate_random_quest(p["level"])
        quest_id = f"random_quest_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        p["quests"][quest_id] = {
            **new_quest,
            "progress": 0,
            "status": "active"
        }
        save_players()
        q = p["quests"]

    quests_text: List[str] = []
    active_count = 0
    completed_count = 0

    for quest_id, quest in q.items():
        status = "‚úÖ" if quest.get("status") == "completed" else "‚åõ"
        if quest.get("status") == "active":
            active_count += 1
        else:
            completed_count += 1

        quests_text.append(
            f"{status} <b>{quest.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"üìù {quest.get('desc', '')}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {quest.get('progress', 0)}/{quest.get('required', 0)}\n"
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–µ—Å—Ç–æ–≤
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–µ—Å—Ç–æ–≤:</b>\n"
        f"‚åõ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_count}\n\n"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞–º–∏
    keyboard: List[List[InlineKeyboardButton]] = []
    if active_count < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞
        keyboard.append([InlineKeyboardButton("üéØ –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç", callback_data="quest:new")])
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="quest:refresh")])
    keyboard.append([InlineKeyboardButton("üö™ –ó–∞–∫—Ä—ã—Ç—å", callback_data="quest:close")])

    text = f"üìú <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:</b>\n\n{stats_text}" + "\n".join(quests_text)

    if query:
        await safe_edit_message_text(query, text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

async def adventure_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è, —Ç–æ—Ä–≥–æ–≤—Ü–∞ –∏–ª–∏ –¥—É—ç–ª–∏
    if context.user_data.get("battle") or context.user_data.get("merchant_active") or (uid in user_to_duel):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ (–±–æ–π/—Ç–æ—Ä–≥–æ–≤–ª—è/–¥—É—ç–ª—å)!",
            reply_markup=MAIN_KB
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_adventure = context.user_data.get("last_adventure")
    if last_adventure:
        cooldown = 6
        elapsed = (datetime.now() - last_adventure).total_seconds()
        if elapsed < cooldown:
            remaining = int(cooldown - elapsed)
            await update.message.reply_text(
                f"–¢—ã —É—Å—Ç–∞–ª. –û—Ç–¥–æ—Ö–Ω–∏ –µ—â—ë {remaining} —Å–µ–∫—É–Ω–¥.",
                reply_markup=MAIN_KB
            )
            return
    
    p = players[uid]
    context.user_data["last_adventure"] = datetime.now()
    
    event = random.choice(["fight", "gold", "item", "merchant", "pet", "treasure", "mystery"])
    if event == "fight":
        enemy = generate_enemy(p["level"])
        context.user_data["battle"] = {
            "enemy": enemy,
            "ability_used": False,
            "message_id": None,
            "chat_id": update.effective_chat.id,
        }
        msg = await update.message.reply_text(
            battle_text(p, enemy, "–ù–∞ —Ç–µ–±—è –Ω–∞–ø–∞–¥–∞–µ—Ç –≤—Ä–∞–≥! –ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?"),
            reply_markup=build_battle_kb()
        )
        context.user_data["battle"]["message_id"] = msg.message_id
    elif event == "gold":
        gain = random.randint(10, 25)
        p["gold"] += gain
        save_players()
        await update.message.reply_text(f"üí∞ –¢—ã –Ω–∞—à—ë–ª –º–µ—à–æ—á–µ–∫ –∑–æ–ª–æ—Ç–∞: +{gain} üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {p['gold']} –∑–æ–ª–æ—Ç–∞.")
    elif event == "item":
        item = random.choice(list(SHOP_ITEMS.keys()))
        add_item(p, item, 1)
        await update.message.reply_text(f"üéí –¢—ã –Ω–∞—à—ë–ª –ø—Ä–µ–¥–º–µ—Ç: {item}! –û–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")
    elif event == "merchant":
        context.user_data["merchant_active"] = True
        await update.message.reply_text(
            "üõí –¢–µ–±–µ –ø–æ–≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —Å—Ç—Ä–∞–Ω—Å—Ç–≤—É—é—â–∏–π —Ç–æ—Ä–≥–æ–≤–µ—Ü:",
            reply_markup=build_shop_kb()
        )
    elif event == "pet":
        # –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
            available_pets = [pet_id for pet_id in PETS.keys() if pet_id not in p.get("pets", [])]
            if available_pets:
                pet_id = random.choice(available_pets)
                p["pets"].append(pet_id)
                pet = PETS[pet_id]
                check_achievements(p, "pet_obtained")
                save_players()
                await update.message.reply_text(
                    f"üêæ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: {pet['emoji']} {pet['name']}!\n"
                    f"üìä –†–µ–¥–∫–æ—Å—Ç—å: {pet['rarity'].title()}\n"
                    "–ü–∏—Ç–æ–º–µ—Ü –¥–∞—ë—Ç –±–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º!"
                )
            else:
                await update.message.reply_text("üêæ –í—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤! –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è!")
        else:
            await update.message.reply_text("üêæ –í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –¥–∏–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –Ω–æ –æ–Ω–æ —É–±–µ–∂–∞–ª–æ...")
    elif event == "treasure":
        # –°–æ–∫—Ä–æ–≤–∏—â–µ —Å –±–æ–ª—å—à–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        gold_gain = random.randint(30, 60)
        xp_gain = random.randint(20, 40)
        p["gold"] += gold_gain
        p["xp"] += xp_gain
        save_players()
        await update.message.reply_text(
            f"üíé –°–æ–∫—Ä–æ–≤–∏—â–µ! –í—ã –Ω–∞—à–ª–∏:\n"
            f"üí∞ –ó–æ–ª–æ—Ç–æ: +{gold_gain}\n"
            f"‚≠ê XP: +{xp_gain}\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {p['gold']} –∑–æ–ª–æ—Ç–∞ –∏ {p['xp']} XP!"
        )
    elif event == "mystery":
        # –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        mystery_events = [
            ("üßô –ú—É–¥—Ä–µ—Ü –±–ª–∞–≥–æ—Å–ª–æ–≤–∏–ª –≤–∞—Å", {"hp": 20, "xp": 15}),
            ("üçÄ –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å", {"gold": 25, "luck": 1}),
            ("‚ö° –≠–Ω–µ—Ä–≥–∏—è –Ω–∞–ø–æ–ª–Ω–∏–ª–∞ –≤–∞—Å", {"attack": 1, "defense": 1}),
            ("üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª", {"xp": 30, "item": "–≠–ª–∏–∫—Å–∏—Ä —É–¥–∞—á–∏"}),
        ]
        event_name, bonuses = random.choice(mystery_events)
        
        for stat, bonus in bonuses.items():
            if stat == "hp":
                p["hp"] = min(p["max_hp"], p["hp"] + bonus)
            elif stat == "xp":
                p["xp"] += bonus
            elif stat == "gold":
                p["gold"] += bonus
            elif stat == "luck":
                p["luck"] = p.get("luck", 0) + bonus
            elif stat == "attack":
                p["attack"] += bonus
            elif stat == "defense":
                p["defense"] += bonus
            elif stat == "item":
                add_item(p, bonus, 1)
        
        save_players()
        await update.message.reply_text(
            f"üîÆ {event_name}!\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º!"
        )

async def shop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    await update.message.reply_text("–õ–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—Ü–∞:", reply_markup=build_shop_kb(p))

async def businesses_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    await update.message.reply_text(
        "üíº –ë–∏–∑–Ω–µ—Å—ã: –ø–æ–∫—É–ø–∞–π –∏ –ø–æ–ª—É—á–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥!\n\n"
        "‚Äî –î–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.\n"
        "‚Äî –£–ª—É—á—à–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –¥–æ—Ö–æ–¥ x —É—Ä–æ–≤–Ω—é.",
        reply_markup=build_businesses_kb(p)
    )

async def shop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    if uid not in players:
        await safe_edit_message_text(query, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    data = query.data # shop:buy:ITEM, shop:bulk:ITEM, shop:close, shop:already_owned, shop:balance, shop:back

    if data == "shop:close":
        context.user_data.pop("merchant_active", None)
        await safe_edit_message_text(query, "–¢–æ—Ä–≥–æ–≤–µ—Ü —É—Ö–æ–¥–∏—Ç –≤ —Ç—É–º–∞–Ω...")
        return
    
    if data == "shop:already_owned":
        await query.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü!")
        return
    
    if data == "shop:balance":
        await query.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {p['gold']} –∑–æ–ª–æ—Ç–∞", show_alert=True)
        return
    
    if data == "shop:back":
        await safe_edit_message_text(
            query,
            "–õ–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—Ü–∞:",
            reply_markup=build_shop_kb(p)
        )
        return
    
    if data == "shop:bulk":
        await safe_edit_message_text(
            query,
            "üõí <b>–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏:",
            parse_mode="HTML",
            reply_markup=build_bulk_shop_kb(p)
        )
        return
    
    if data.startswith("shop:bulk:"):
        _, _, item_name = data.split(":", 2)
        if item_name not in SHOP_ITEMS:
            await safe_edit_message_text(query, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç.")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
        context.user_data["bulk_buy_item"] = item_name
        context.user_data["awaiting_bulk_amount"] = True
        
        price = SHOP_ITEMS[item_name]["price"]
        max_affordable = p["gold"] // price
        
        await safe_edit_message_text(
            query,
            f"üõí <b>–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {item_name}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {price} –∑–æ–ª–æ—Ç–∞\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {p['gold']} –∑–æ–ª–æ—Ç–∞\n"
            f"üì¶ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å: {max_affordable} —à—Ç—É–∫\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            parse_mode="HTML"
        )
        return
    
    if data.startswith("shop:category:"):
        _, _, category = data.split(":", 2)
        category_items = []
        
        for item_name, meta in SHOP_ITEMS.items():
            if meta["type"] == category:
                category_items.append((item_name, meta))
        
        if not category_items:
            await query.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
            return
        
        buttons = []
        for item_name, meta in category_items:
            emoji = meta.get("emoji", "üì¶")
            price = meta['price']
            inventory_count = p["inventory"].get(item_name, 0)
            
            if category == "pet":
                pet_id = meta["pet_id"]
                if pet_id in p.get("pets", []):
                    buttons.append([InlineKeyboardButton(f"{emoji} {item_name} ‚úÖ (–£–∂–µ –µ—Å—Ç—å)", callback_data="shop:already_owned")])
                else:
                    buttons.append([InlineKeyboardButton(f"{emoji} {item_name} ({price}üí∞)", callback_data=f"shop:buy:{item_name}")])
            else:
                buttons.append([InlineKeyboardButton(f"{emoji} {item_name} ({price}üí∞) x{inventory_count}", callback_data=f"shop:buy:{item_name}")])
        
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="shop:back")])
        
        category_names = {"consumable": "üß™ –ü–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ", "equipment": "‚öîÔ∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", "pet": "üêæ –ü–∏—Ç–æ–º—Ü—ã"}
        category_name = category_names.get(category, category.title())
        
        await safe_edit_message_text(
            query,
            f"üõí <b>{category_name}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

    _, action, item_name = data.split(":", 2)
    if action == "buy":
        if item_name not in SHOP_ITEMS:
            await safe_edit_message_text(query, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç.")
            return
        
        price = SHOP_ITEMS[item_name]["price"]
        if p["gold"] < price:
            await safe_edit_message_text(
                query,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item_name}.\n"
                f"–ù—É–∂–Ω–æ {price}üí∞, —É –≤–∞—Å {p['gold']}üí∞.",
                reply_markup=build_shop_kb(p)
            )
            return

        p["gold"] -= price
        emoji = SHOP_ITEMS[item_name].get("emoji", "üì¶")
        
        if SHOP_ITEMS[item_name]["type"] == "consumable":
            add_item(p, item_name, 1)
            await safe_edit_message_text(
                query,
                f"{emoji} –¢—ã –∫—É–ø–∏–ª: {item_name}. –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
                reply_markup=build_shop_kb(p)
            )
        elif SHOP_ITEMS[item_name]["type"] == "equipment":
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
            effect = SHOP_ITEMS[item_name]["effect"]
            if "attack_plus" in effect:
                p["attack"] += effect["attack_plus"]
            if "defense_plus" in effect:
                p["defense"] += effect["defense_plus"]
            if "luck_plus" in effect:
                p["luck"] = p.get("luck", 0) + effect["luck_plus"]
            save_players()
            await safe_edit_message_text(
                query,
                f"{emoji} –¢—ã –∫—É–ø–∏–ª –∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª: {item_name}. –¢–≤–æ—è —Å–∏–ª–∞ —Ä–∞—Å—Ç—ë—Ç!\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
                reply_markup=build_shop_kb(p)
            )
        elif SHOP_ITEMS[item_name]["type"] == "pet":
            # –ü–æ–∫—É–ø–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
            pet_id = SHOP_ITEMS[item_name]["pet_id"]
            if pet_id not in p.get("pets", []):
                p.setdefault("pets", []).append(pet_id)
                save_players()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                check_achievements(p, "pet_check", len(p["pets"]))
                await safe_edit_message_text(
                    query,
                    f"{emoji} –¢—ã –∫—É–ø–∏–ª –ø–∏—Ç–æ–º—Ü–∞: {item_name}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {len(p['pets'])} –ø–∏—Ç–æ–º—Ü–µ–≤.\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
                    reply_markup=build_shop_kb(p)
                )
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–æ–ª–æ—Ç–æ, –µ—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –µ—Å—Ç—å
                p["gold"] += price
                await safe_edit_message_text(
                    query,
                    f"‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü {item_name}! –ó–æ–ª–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.\n"
                    f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
                    reply_markup=build_shop_kb(p)
                )

async def businesses_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    if uid not in players:
        await safe_edit_message_text(query, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    data = query.data  # biz:buy:ID | biz:upgrade:ID | biz:claim | biz:upgrade_all | biz:close | biz:details | biz:info

    if data == "biz:close":
        await safe_edit_message_text(query, "–ó–∞–∫—Ä—ã—Ç–æ.")
        return
    
    if data == "biz:info":
        income_info = get_business_income_info(p)
        text = (
            f"üíº <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–∞—Ö</b>\n\n"
            f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {income_info['total_per_min']}/–º–∏–Ω\n"
            f"üìà –î–æ—Ö–æ–¥ –≤ —á–∞—Å: {income_info['total_per_hour']}\n"
            f"üì¶ –í–ª–∞–¥–µ–Ω–∏–π: {len(p.get('businesses', {}))}\n\n"
        )
        
        if income_info["businesses"]:
            text += "<b>–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã:</b>\n"
            for biz in income_info["businesses"]:
                text += f"‚Ä¢ {biz['name']} —É—Ä.{biz['level']} ({biz['income_per_min']}/–º–∏–Ω)\n"
        
        await safe_edit_message_text(query, text, parse_mode="HTML", reply_markup=build_businesses_kb(p))
        return
    
    if data == "biz:details":
        income_info = get_business_income_info(p)
        text = "üíº <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–∞—Ö</b>\n\n"
        
        if income_info["businesses"]:
            for biz in income_info["businesses"]:
                text += (
                    f"üè¢ <b>{biz['name']}</b>\n"
                    f"üìä –£—Ä–æ–≤–µ–Ω—å: {biz['level']}\n"
                    f"üí∞ –î–æ—Ö–æ–¥: {biz['income_per_min']}/–º–∏–Ω ({biz['income_per_hour']}/—á–∞—Å)\n"
                    f"‚ö° –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {biz['upgrade_cost']}üí∞\n\n"
                )
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤.\n"
        
        await safe_edit_message_text(query, text, parse_mode="HTML", reply_markup=build_businesses_kb(p))
        return
    
    if data == "biz:claim":
        last = p.get("last_business_claim")
        now = datetime.now()
        if last:
            last_dt = datetime.fromisoformat(last)
        else:
            last_dt = now
            p["last_business_claim"] = now.isoformat()
        
        minutes = max(0, int((now - last_dt).total_seconds() // 60))
        owned = p.get("businesses", {})
        total_income = 0
        
        for biz_id, meta in owned.items():
            base = BUSINESSES.get(biz_id, {}).get("income_per_min", 0)
            level = meta.get("level", 1)
            total_income += base * level * minutes
        
        p["gold"] += total_income
        p["last_business_claim"] = now.isoformat()
        save_players()
        
        await safe_edit_message_text(
            query,
            f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {total_income}üí∞ –∑–∞ {minutes} –º–∏–Ω.\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_businesses_kb(p)
        )
        return
    
    if data == "biz:upgrade_all":
        owned = p.setdefault("businesses", {})
        if not owned:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!", show_alert=True)
            return
        
        cost = 0
        for biz_id in owned.keys():
            cost += int(BUSINESSES[biz_id]["price"] * 0.5)
        
        if p["gold"] < cost:
            await safe_edit_message_text(
                query,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤.\n"
                f"–ù—É–∂–Ω–æ {cost}üí∞, —É –≤–∞—Å {p['gold']}üí∞.",
                reply_markup=build_businesses_kb(p)
            )
            return
        
        p["gold"] -= cost
        for biz_id in owned.keys():
            owned[biz_id]["level"] = owned[biz_id].get("level", 1) + 1
        
        save_players()
        await safe_edit_message_text(
            query,
            f"‚úÖ –í—Å–µ –±–∏–∑–Ω–µ—Å—ã —É–ª—É—á—à–µ–Ω—ã!\n"
            f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost}üí∞\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_businesses_kb(p)
        )
        return
    
    if data.startswith("biz:upgrade:"):
        _, _, biz_id = data.split(":", 2)
        if biz_id not in BUSINESSES:
            await query.answer("–¢–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç", show_alert=True)
            return
        
        if biz_id not in p.get("businesses", {}):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞", show_alert=True)
            return
        
        upgrade_cost = int(BUSINESSES[biz_id]["price"] * 0.5)
        if p["gold"] < upgrade_cost:
            await safe_edit_message_text(
                query,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è {BUSINESSES[biz_id]['name']}.\n"
                f"–ù—É–∂–Ω–æ {upgrade_cost}üí∞, —É –≤–∞—Å {p['gold']}üí∞.",
                reply_markup=build_businesses_kb(p)
            )
            return
        
        p["gold"] -= upgrade_cost
        p["businesses"][biz_id]["level"] = p["businesses"][biz_id].get("level", 1) + 1
        save_players()
        
        await safe_edit_message_text(
            query,
            f"‚úÖ {BUSINESSES[biz_id]['name']} —É–ª—É—á—à–µ–Ω!\n"
            f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {upgrade_cost}üí∞\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_businesses_kb(p)
        )
        return
    
    if data.startswith("biz:buy:"):
        _, _, biz_id = data.split(":", 2)
        if biz_id not in BUSINESSES:
            await query.answer("–¢–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç", show_alert=True)
            return
        
        if biz_id in p.get("businesses", {}):
            await query.answer("–£–∂–µ –∫—É–ø–ª–µ–Ω–æ", show_alert=True)
            return
        
        price = BUSINESSES[biz_id]["price"]
        if p["gold"] < price:
            await safe_edit_message_text(
                query,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {BUSINESSES[biz_id]['name']}.\n"
                f"–ù—É–∂–Ω–æ {price}üí∞, —É –≤–∞—Å {p['gold']}üí∞.",
                reply_markup=build_businesses_kb(p)
            )
            return
        
        p["gold"] -= price
        p.setdefault("businesses", {})[biz_id] = {"level": 1, "bought_at": datetime.now().isoformat()}
        if not p.get("last_business_claim"):
            p["last_business_claim"] = datetime.now().isoformat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        check_achievements(p, "business_check")
        
        save_players()
        await safe_edit_message_text(
            query,
            f"üíº –ö—É–ø–ª–µ–Ω –±–∏–∑–Ω–µ—Å: {BUSINESSES[biz_id]['name']} –∑–∞ {price}üí∞.\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_businesses_kb(p)
        )
        return

async def casino_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /casino"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    p = players[uid]
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–ª—É—é —Å—Ç–∞–≤–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    context.user_data.pop("casino_bet", None)
    context.user_data["awaiting_casino_bet"] = True
    await update.message.reply_text(
        f"üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!</b>\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {p['gold']} –∑–æ–ª–æ—Ç–∞\n\n"
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ) –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25%):",
        parse_mode="HTML"
    )

async def casino_bet_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    p = players[uid]
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
    if not context.user_data.get("awaiting_casino_bet"):
        return
    text = update.message.text.strip()
    
    try:
        if "%" in text:
            percent = float(text.replace("%", "").strip())
            if percent <= 0 or percent > 100:
                raise ValueError
            bet = int(p["gold"] * (percent / 100))
        else:
            bet = int(text)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 25%)")
        return
    
    min_bet = min(game["min_bet"] for game in CASINO_GAMES.values())
    if bet < min_bet:
        await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_bet} –∑–æ–ª–æ—Ç–∞")
        return
    if bet > p["gold"]:
        await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: {p['gold']}")
        return
    
    context.user_data["casino_bet"] = bet
    context.user_data["awaiting_casino_bet"] = False
    await show_casino_games(update, context)

async def show_casino_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏–≥—Ä –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏"""
    bet = context.user_data["casino_bet"]
    
    await update.message.reply_text(
        f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{bet}</b> –∑–æ–ª–æ—Ç–∞\n"
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n\n"
        "üéØ –£–¥–≤–æ–µ–Ω–∏–µ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 45%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x2\n"
        "üé≤ –ö–æ—Å—Ç–∏ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 50%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x1.5\n"
        "üé° –†—É–ª–µ—Ç–∫–∞ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 40%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x2\n"
        "üé∞ –°–ª–æ—Ç—ã - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 30%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x3\n"
        "üÉè –ë–ª—ç–∫–¥–∂–µ–∫ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 48%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x2.5",
        parse_mode="HTML",
        reply_markup=build_casino_games_kb()
    )

async def casino_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –∫–∞–∑–∏–Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    query = update.callback_query
    await query.answer()
    
    uid = str(query.from_user.id)
    if uid not in players:
        await safe_edit_message_text(query, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É (/start)")
        return
    
    p = players[uid]
    data = query.data.split(":")
    
    if data[1] == "exit":
        context.user_data.pop("casino_bet", None)
        context.user_data.pop("awaiting_casino_bet", None)
        await safe_edit_message_text(query, "üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–∞–∑–∏–Ω–æ. –£–¥–∞—á–∏ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö!")
        return
    
    elif data[1] == "back":
        await safe_edit_message_text(
            query,
            f"üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!</b>\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {p['gold']} –∑–æ–ª–æ—Ç–∞\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ) –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25%):",
            parse_mode="HTML"
        )
        return
    
    elif data[1] == "quick_bets":
        await safe_edit_message_text(
            query,
            f"‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏</b>\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {p['gold']} –∑–æ–ª–æ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
            parse_mode="HTML",
            reply_markup=build_quick_bets_kb(p)
        )
        return
    
    elif data[1] == "quick_bet":
        if len(data) < 3:
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏", show_alert=True)
            return
        
        try:
            bet = int(data[2])
        except ValueError:
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏", show_alert=True)
            return
        
        if bet > p["gold"]:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!", show_alert=True)
            return
        
        context.user_data["casino_bet"] = bet
        await safe_edit_message_text(
            query,
            f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{bet}</b> –∑–æ–ª–æ—Ç–∞\n"
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n\n"
            "üéØ –£–¥–≤–æ–µ–Ω–∏–µ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 45%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x2\n"
            "üé≤ –ö–æ—Å—Ç–∏ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 50%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x1.5\n"
            "üé° –†—É–ª–µ—Ç–∫–∞ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 40%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x2\n"
            "üé∞ –°–ª–æ—Ç—ã - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 30%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x3\n"
            "üÉè –ë–ª—ç–∫–¥–∂–µ–∫ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 48%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x2.5",
            parse_mode="HTML",
            reply_markup=build_casino_games_kb()
        )
        return
    
    elif data[1] == "history":
        stats = get_casino_stats(p)
        history = p.get("casino_history", [])
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ</b>\n\n"
            f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']}\n"
            f"üèÜ –ü–æ–±–µ–¥—ã: {stats['wins']}\n"
            f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['losses']}\n"
            f"üìà –í–∏–Ω—Ä–µ–π—Ç: {stats['winrate']:.1f}%\n"
            f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {stats['total_profit']} –∑–æ–ª–æ—Ç–∞\n\n"
        )
        
        if history:
            text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä:</b>\n"
            for entry in history[-5:]:
                game_name = CASINO_GAMES[entry["game"]]["name"]
                result = "‚úÖ" if entry["result"] else "‚ùå"
                profit = entry["prize"] - entry["bet"]
                text += f"{result} {game_name}: {entry['bet']}üí∞ ‚Üí {profit:+d}üí∞\n"
        else:
            text += "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞."
        
        await safe_edit_message_text(
            query,
            text,
            parse_mode="HTML",
            reply_markup=build_casino_games_kb()
        )
        return
    
    elif data[1] == "change_bet":
        context.user_data.pop("casino_bet", None)
        context.user_data["awaiting_casino_bet"] = True
        await safe_edit_message_text(
            query,
            f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ) –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25%):\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']} –∑–æ–ª–æ—Ç–∞",
            parse_mode="HTML"
        )
        return
    
    elif data[1] == "balance":
        await query.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {p['gold']} –∑–æ–ª–æ—Ç–∞", show_alert=True)
        return
    
    elif data[1] == "no_money":
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã!", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–≤–∫—É
    bet = context.user_data.get("casino_bet")
    game_type = data[1]
    
    if bet is None:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç–µ.", show_alert=True)
        return
    
    result = play_casino_game(p, game_type, bet)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if result["success"] is not None:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã
        add_casino_history(p, game_type, bet, result["success"], result.get("prize", 0))
    
    save_players()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üé∞ <b>{CASINO_GAMES[game_type]['name']}</b>\n"
        f"üíµ –°—Ç–∞–≤–∫–∞: <b>{bet}</b> –∑–æ–ª–æ—Ç–∞\n\n"
        f"{result['message']}\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{p['gold']}</b> –∑–æ–ª–æ—Ç–∞\n\n"
    )
    
    if "–ü–æ–¥–æ–∂–¥–∏—Ç–µ" in result["message"]:
        await query.answer(result["message"], show_alert=True)
        await safe_edit_message_text(
            query,
            message,
            parse_mode="HTML",
            reply_markup=build_casino_games_kb()
        )
        return
    
    if result["success"] is False:
        message += "üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
    elif result["success"] is True:
        message += "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?"
    else:
        message += "ü§ù –ù–∏—á—å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    
    await safe_edit_message_text(
        query,
        message,
        parse_mode="HTML",
        reply_markup=build_casino_games_kb()
    )

async def clan_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –∫–ª–∞–Ω–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    uid = str(query.from_user.id)
    if uid not in players:
        await safe_edit_message_text(query, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É (/start)")
        return
    
    p = players[uid]
    data = query.data.split(":")
    action = data[1]
    
    if action == "create":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞
        context.user_data["clan_creation"] = True
        await safe_edit_message_text(
            query,
            "üèóÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞</b>\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ (–æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            "‚ÑπÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([])
        )
        return
    
    elif action == "join":
        if len(data) < 3:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∫–ª–∞–Ω", show_alert=True)
            return
        
        clan_name = data[2]
        if clan_name not in clans:
            await query.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if p.get("clan"):
            await query.answer("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", show_alert=True)
            return
        
        if join_clan(clan_name, uid):
            save_players()
            save_clans()
            await query.answer(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª–∞–Ω—É {clan_name}!", show_alert=True)
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await refresh_clan_message(query, p)
        return
    
    elif action == "leave":
        if not p.get("clan"):
            await query.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", show_alert=True)
            return
        
        clan_name = p["clan"]
        if leave_clan(uid):
            save_players()
            save_clans()
            await query.answer(f"‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω {clan_name}", show_alert=True)
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await refresh_clan_message(query, p)
        return
    
    elif action == "refresh":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await refresh_clan_message(query, p)
        return
    
    elif action == "main_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.reply_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=MAIN_KB
        )
        await query.delete_message()
        return

async def handle_clan_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞"""
    msg = update.message
    uid = str(update.effective_user.id)
    
    if uid not in players:
        await msg.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É (/start)")
        return
    
    p = players[uid]
    clan_name = msg.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –∫–ª–∞–Ω–µ
    if p.get("clan"):
        context.user_data.pop("clan_creation", None)
        await msg.reply_text("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!", reply_markup=MAIN_KB)
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞–Ω–∞
    if len(clan_name) < 3 or len(clan_name) > 20:
        await msg.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not clan_name.replace(" ", "").replace("-", "").replace("_", "").isalnum():
        await msg.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    if clan_name in clans:
        await msg.reply_text(
            f"‚ùå –ö–ª–∞–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{clan_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–Ω
    if create_clan(clan_name, uid, p["name"]):
        save_players()
        save_clans()
        context.user_data.pop("clan_creation", None)
        
        await msg.reply_text(
            f"üéâ <b>–ö–ª–∞–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {clan_name}\n"
            f"üëë –õ–∏–¥–µ—Ä: {p['name']}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 1/20\n\n"
            f"–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –∫–ª–∞–Ω—É!",
            parse_mode="HTML",
            reply_markup=MAIN_KB
        )
    else:
        await msg.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode="HTML"
        )

async def refresh_clan_message(query, player):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∞–Ω–∞—Ö"""
    if player.get("clan"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
        clan_name = player["clan"]
        if clan_name in clans:
            clan = clans[clan_name]
            text = (
                f"üè∞ <b>–ö–ª–∞–Ω: {clan['name']}</b>\n\n"
                f"üëë –õ–∏–¥–µ—Ä: {players[clan['leader']]['name']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(clan['members'])}/20\n"
                f"üìä –£—Ä–æ–≤–µ–Ω—å: {clan['level']}\n"
                f"‚≠ê XP: {clan['xp']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {clan['description']}\n\n"
            )
            
            if clan["leader"] == str(query.from_user.id):
                text += "üëë –í—ã –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞"
            else:
                text += "üë§ –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
            player.pop("clan", None)  # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞–Ω
            save_players()
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤
        if not clans:
            text = (
                "üè∞ <b>–ö–ª–∞–Ω—ã:</b>\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∫–ª–∞–Ω!"
            )
        else:
            text = "üè∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞–Ω—ã:</b>\n\n"
            for clan_name, clan in clans.items():
                text += f"{clan['color']} <b>{clan['name']}</b>\n"
                text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(clan['members'])}/20\n"
                text += f"üëë –õ–∏–¥–µ—Ä: {players[clan['leader']]['name']}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = build_clans_keyboard(player)
    
    await safe_edit_message_text(query, text, parse_mode="HTML", reply_markup=keyboard)

# ----------------------------- –ë–æ–π: callback-–∏ -------------------------------

async def battle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    if uid not in players:
        await safe_edit_message_text(query, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    state = context.user_data.get("battle")
    if not state:
        await safe_edit_message_text(query, "–°–µ–π—á–∞—Å —Ç—ã –Ω–µ –≤ –±–æ—é.")
        return

    enemy = state["enemy"]
    action = query.data # battle:attack | battle:ability | battle:potion | battle:run

    # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤
    stats_with_pets = get_player_stats_with_pets(p)

    log = ""
    if action == "battle:attack":
        dmg = dmg_roll(stats_with_pets["attack"], enemy["defense"])
        enemy["hp"] -= dmg
        log += f"–¢—ã –∞—Ç–∞–∫–æ–≤–∞–ª {enemy['name']} –∏ –Ω–∞–Ω—ë—Å {dmg} —É—Ä–æ–Ω–∞.\n"
    elif action == "battle:ability":
        if state.get("ability_used"):
            log += "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º –±–æ—é!\n"
        else:
            cls = p["class"]
            if cls == "‚öîÔ∏è –í–æ–∏–Ω":
                dmg = dmg_roll(stats_with_pets["attack"], enemy["defense"]) * 2
                enemy["hp"] -= dmg
                log += f"–¢—ã –ø—Ä–∏–º–µ–Ω–∏–ª '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä' –∏ –Ω–∞–Ω—ë—Å {dmg} —É—Ä–æ–Ω–∞!\n"
            elif cls == "üßô –ú–∞–≥":
                dmg = 15
                enemy["hp"] -= dmg
                log += f"–¢—ã –ø—Ä–∏–º–µ–Ω–∏–ª '–û–≥–Ω–µ–Ω–Ω–∞—è –≤—Å–ø—ã—à–∫–∞' –∏ –Ω–∞–Ω—ë—Å {dmg} —á–∏—Å—Ç–æ–≥–æ —É—Ä–æ–Ω–∞!\n"
            elif cls == "üïµÔ∏è –í–æ—Ä":
                dmg = max(1, stats_with_pets["attack"] + random.randint(0, 2)) # –∏–≥–Ω–æ—Ä –±—Ä–æ–Ω–∏
                enemy["hp"] -= dmg
                log += f"–¢—ã –ø—Ä–∏–º–µ–Ω–∏–ª '–¢–µ–Ω–µ–≤–∞—è –∞—Ç–∞–∫–∞' –∏ –Ω–∞–Ω—ë—Å {dmg} —É—Ä–æ–Ω–∞ (–∏–≥–Ω–æ—Ä –±—Ä–æ–Ω–∏)!\n"
            else:
                log += "–¢–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –∏–º–µ–µ—Ç –æ—Å–æ–±–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.\n"
            state["ability_used"] = True
    elif action == "battle:potion":
        if consume_item(p, "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", 1):
            healed = heal_player(p, 35)
            log += f"–¢—ã –≤—ã–ø–∏–ª –∑–µ–ª—å–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {healed} HP.\n"
        else:
            log += "–£ —Ç–µ–±—è –Ω–µ—Ç –ú–∞–ª—ã—Ö –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è.\n"
    elif action == "battle:run":
        if random.random() < 0.6:
            await safe_edit_message_text(query, "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª —Å –ø–æ–ª—è –±–æ—è.")
            context.user_data.pop("battle", None)
            return
        else:
            log += "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!\n"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
    if enemy["hp"] <= 0:
        loot_text = grant_rewards(p, enemy["xp"], enemy["gold"], enemy.get("loot"))
        quest_text = update_quests_on_enemy_kill(p, enemy.get("type", ""))

        await safe_edit_message_text(query, f"–¢—ã –ø–æ–±–µ–¥–∏–ª {enemy['name']}! {loot_text}{quest_text}")
        context.user_data.pop("battle", None)
        return

    # –•–æ–¥ –≤—Ä–∞–≥–∞ (–µ—Å–ª–∏ –∂–∏–≤)
    if enemy["hp"] > 0 and action != "battle:run":
        edmg = dmg_roll(enemy["attack"], stats_with_pets["defense"])
        p["hp"] -= edmg
        save_players()
        log += f"{enemy['name']} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {edmg} —É—Ä–æ–Ω–∞.\n"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
    if p["hp"] <= 0:
        loss_gold = min(10, p["gold"])
        p["gold"] -= loss_gold
        p["hp"] = max(1, p["max_hp"] // 2)
        save_players()
        await safe_edit_message_text(
            query,
            f"–¢—ã –ø–∞–ª –≤ –±–æ—é... –ü–æ—Ç–µ—Ä—è–Ω–æ {loss_gold} –∑–æ–ª–æ—Ç–∞. "
            f"–¢—ã –ø—Ä–∏—Ö–æ–¥–∏—à—å –≤ —Å–µ–±—è —Å {p['hp']}/{p['max_hp']} HP."
        )
        context.user_data.pop("battle", None)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–æ—è
    try:
        await safe_edit_message_text(
            query,
            battle_text(p, enemy, log),
            reply_markup=build_battle_kb()
        )
    except Exception:
        await query.message.reply_text(
            battle_text(p, enemy, log),
            reply_markup=build_battle_kb()
        )

# ----------------------------- –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞/—Ç–µ–∫—Å—Ç—ã ---------------------------

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    user = update.effective_user
    player = ensure_player(user.id, user.first_name or "–ì–µ—Ä–æ–π")

    state = context.user_data.get("state", "idle")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ
    if context.user_data.get("awaiting_casino_bet"):
        await casino_bet_input(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞–Ω–∞
    if context.user_data.get("clan_creation"):
        await handle_clan_creation(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    if context.user_data.get("awaiting_bulk_amount"):
        await handle_bulk_purchase(update, context)
        return

    if state == "choose_class":
        choice = msg.text.strip()
        if choice in CLASS_STATS:
            set_class(player, choice)
            context.user_data["state"] = "idle"
            await msg.reply_text(
                f"üéâ <b>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b>\n\n"
                f"üé≠ –ö–ª–∞—Å—Å: {choice}\n"
                f"üí´ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {ability_description(choice)}\n\n"
                f"üåü –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                f"üó∫Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ\n"
                f"üé∞ –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n"
                f"üõí –ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
                f"üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
                f"üêæ –°–æ–±–∏—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤\n\n"
                f"üéÆ –£–¥–∞—á–∏ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö!",
                parse_mode="HTML",
                reply_markup=MAIN_KB
            )
        else:
            await msg.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=CLASS_KB)
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if msg.text == "üìä –°—Ç–∞—Ç—É—Å":
        await status_cmd(update, context)
    elif msg.text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        await inventory_cmd(update, context)
    elif msg.text == "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –∏–ª–∏ —Ç–æ—Ä–≥–æ–≤—Ü–∞
        if context.user_data.get("battle"):
            await msg.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±–æ–π!", reply_markup=MAIN_KB)
            return
        if context.user_data.get("merchant_active"):
            await msg.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é —Å –∫—É–ø—Ü–æ–º!", reply_markup=MAIN_KB)
            return
            
        await adventure_cmd(update, context)
    elif msg.text == "üßæ –ö–≤–µ—Å—Ç—ã":
        await quests_cmd(update, context)
    elif msg.text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        await shop_cmd(update, context)
    elif msg.text == "üé∞ –ö–∞–∑–∏–Ω–æ":
        await casino_cmd(update, context)
    elif msg.text == "üí∏ –¢—Ä–∞—Ç—ã":
        await spend_cmd(update, context)
    elif msg.text == "‚öôÔ∏è –ü–æ–º–æ—â—å":
        await help_cmd(update, context)
    elif msg.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
        await achievements_cmd(update, context)
    elif msg.text == "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ":
        await daily_cmd(update, context)
    elif msg.text == "üêæ –ü–∏—Ç–æ–º—Ü—ã":
        await pets_cmd(update, context)
    elif msg.text == "üíº –ë–∏–∑–Ω–µ—Å":
        await businesses_cmd(update, context)
    elif msg.text == "üè∞ –ö–ª–∞–Ω—ã":
        await clans_cmd(update, context)
    elif msg.text == "‚öîÔ∏è PvP":
        await pvp_cmd(update, context)
    else:
        await msg.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /help.", reply_markup=MAIN_KB)

async def handle_bulk_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏"""
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    
    p = players[uid]
    item_name = context.user_data.get("bulk_buy_item")
    
    if not item_name or item_name not in SHOP_ITEMS:
        context.user_data.pop("bulk_buy_item", None)
        context.user_data.pop("awaiting_bulk_amount", None)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=MAIN_KB)
        return
    
    try:
        amount = int(update.message.text.strip())
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return
    
    price = SHOP_ITEMS[item_name]["price"]
    total_cost = price * amount
    
    if p["gold"] < total_cost:
        max_affordable = p["gold"] // price
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {amount} {item_name}.\n"
            f"–ù—É–∂–Ω–æ {total_cost}üí∞, —É –≤–∞—Å {p['gold']}üí∞.\n"
            f"–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å: {max_affordable} —à—Ç—É–∫"
        )
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    p["gold"] -= total_cost
    add_item(p, item_name, amount)
    
    emoji = SHOP_ITEMS[item_name].get("emoji", "üì¶")
    
    await update.message.reply_text(
        f"üõí <b>–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"{emoji} –ö—É–ø–ª–µ–Ω–æ: {item_name} x{amount}\n"
        f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_cost}üí∞\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
        parse_mode="HTML",
        reply_markup=MAIN_KB
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("bulk_buy_item", None)
    context.user_data.pop("awaiting_bulk_amount", None)

def build_clans_keyboard(player: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞–º–∏"""
    keyboard = []
    
    if player.get("clan"):
        # –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–ª–∞–Ω–µ
        keyboard.append([InlineKeyboardButton("üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω", callback_data="clan:leave")])
    else:
        # –ò–≥—Ä–æ–∫ –Ω–µ –≤ –∫–ª–∞–Ω–µ
        keyboard.append([InlineKeyboardButton("üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω", callback_data="clan:create")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞–Ω–∞–º
        available_clans = []
        player_id = str(next((k for k, v in players.items() if v is player), None) or "")
        for clan_name, clan in clans.items():
            if len(clan['members']) < 20 and player_id not in clan['members']:
                available_clans.append(clan_name)
        
        if available_clans:
            for clan_name in available_clans[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫
                clan = clans[clan_name]
                keyboard.append([InlineKeyboardButton(
                    f"‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ {clan['name']}",
                    callback_data=f"clan:join:{clan_name}"
                )])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="clan:refresh")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="clan:main_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def build_spend_kb(player: Dict[str, Any]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìò –û–±—É—á–µ–Ω–∏–µ (+80 XP) ‚Äî 50üí∞", callback_data="spend:training")],
        [
            InlineKeyboardButton("‚öí –£–ª—É—á—à–∏—Ç—å –∞—Ç–∞–∫—É (+1) ‚Äî 100üí∞", callback_data="spend:up_atk"),
            InlineKeyboardButton("üõ° –£–ª—É—á—à–∏—Ç—å –∑–∞—â–∏—Ç—É (+1) ‚Äî 100üí∞", callback_data="spend:up_def"),
        ],
        [InlineKeyboardButton("üéÅ –ö—É–ø–∏—Ç—å –∫–µ–π—Å ‚Äî 120üí∞", callback_data="spend:lootbox")],
        [
            InlineKeyboardButton("üéó –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 25üí∞", callback_data="spend:donate:25"),
            InlineKeyboardButton("50üí∞", callback_data="spend:donate:50"),
            InlineKeyboardButton("100üí∞", callback_data="spend:donate:100"),
        ],
        [InlineKeyboardButton("üö™ –ó–∞–∫—Ä—ã—Ç—å", callback_data="spend:close")],
    ])

async def spend_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    await update.message.reply_text(
        "üí∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∑–æ–ª–æ—Ç–æ:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_spend_kb(p)
    )

async def spend_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    if uid not in players:
        await safe_edit_message_text(query, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return
    p = players[uid]
    data = query.data.split(":")  # spend:action[:amount]

    def not_enough(required: int):
        return (
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.\n"
            f"–ù—É–∂–Ω–æ {required}üí∞, —É —Ç–µ–±—è {p['gold']}üí∞."
        )

    if data[1] == "close":
        await safe_edit_message_text(query, "–ó–∞–∫—Ä—ã—Ç–æ.")
        return

    if data[1] == "training":
        cost, xp_gain = 50, 80
        if p["gold"] < cost:
            await safe_edit_message_text(query, not_enough(cost), reply_markup=build_spend_kb(p))
            return
        p["gold"] -= cost
        p["xp"] += xp_gain
        save_players()
        await safe_edit_message_text(
            query,
            f"üìò –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: +{xp_gain} XP. –ë–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_spend_kb(p)
        )
        return

    if data[1] == "up_atk":
        cost = 100
        if p["gold"] < cost:
            await safe_edit_message_text(query, not_enough(cost), reply_markup=build_spend_kb(p))
            return
        p["gold"] -= cost
        p["attack"] += 1
        save_players()
        await safe_edit_message_text(
            query,
            f"‚öí –ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1. –ë–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_spend_kb(p)
        )
        return

    if data[1] == "up_def":
        cost = 100
        if p["gold"] < cost:
            await safe_edit_message_text(query, not_enough(cost), reply_markup=build_spend_kb(p))
            return
        p["gold"] -= cost
        p["defense"] += 1
        save_players()
        await safe_edit_message_text(
            query,
            f"üõ° –ó–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1. –ë–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_spend_kb(p)
        )
        return

    if data[1] == "lootbox":
        cost = 120
        if p["gold"] < cost:
            await safe_edit_message_text(query, not_enough(cost), reply_markup=build_spend_kb(p))
            return
        p["gold"] -= cost
        reward_text = "–ü—É—Å—Ç–æ–π –∫–µ–π—Å... –Ω–µ–≤–µ–∑—ë—Ç!"
        # 10% —à–∞–Ω—Å –ø–∏—Ç–æ–º—Ü–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if random.random() < 0.10:
            available_pets = [pid for pid in PETS.keys() if pid not in p.get("pets", [])]
            if available_pets:
                pet_id = random.choice(available_pets)
                p.setdefault("pets", []).append(pet_id)
                reward_text = f"üêæ –ü–∏—Ç–æ–º–µ—Ü: {PETS[pet_id]['emoji']} {PETS[pet_id]['name']}"
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –∑–æ–ª–æ—Ç–æ
        if reward_text.startswith("–ü—É—Å—Ç–æ–π"):
            candidates = ["–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "–†—É–Ω–∞ —Å–∏–ª—ã", "–≠–ª–∏–∫—Å–∏—Ä —É–¥–∞—á–∏", "–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏"]
            if random.random() < 0.6:
                item = random.choice(candidates)
                add_item(p, item, 1)
                reward_text = f"üéí –ü—Ä–µ–¥–º–µ—Ç: {item}"
            else:
                gold_gain = random.randint(50, 200)
                p["gold"] += gold_gain
                reward_text = f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: +{gold_gain} –∑–æ–ª–æ—Ç–∞"
        save_players()
        await safe_edit_message_text(
            query,
            f"üéÅ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç! {reward_text}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_spend_kb(p)
        )
        return

    if data[1] == "donate":
        if len(data) < 3:
            await query.answer("–û—à–∏–±–∫–∞ –¥–æ–Ω–∞—Ç–∞", show_alert=True)
            return
        amount = int(data[2])
        if p["gold"] < amount:
            await safe_edit_message_text(query, not_enough(amount), reply_markup=build_spend_kb(p))
            return
        p["gold"] -= amount
        xp_gain = amount // 2
        p["xp"] += xp_gain
        save_players()
        await safe_edit_message_text(
            query,
            f"üéó –°–ø–∞—Å–∏–±–æ –∑–∞ —â–µ–¥—Ä–æ—Å—Ç—å! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {amount}üí∞, –ø–æ–ª—É—á–µ–Ω–æ +{xp_gain} XP.\n–ë–∞–ª–∞–Ω—Å: {p['gold']}üí∞",
            reply_markup=build_spend_kb(p)
        )
        return

async def quest_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –∫–≤–µ—Å—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    uid = str(query.from_user.id)
    if uid not in players:
        await safe_edit_message_text(query, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É (/start)")
        return
    
    p = players[uid]
    data = query.data.split(":")
    
    if data[1] == "close":
        await safe_edit_message_text(query, "–ó–∞–∫—Ä—ã—Ç–æ.")
        return
    
    elif data[1] == "refresh":
        await quests_cmd(update, context)
        return
    
    elif data[1] == "new":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        active_quests = sum(1 for q in p["quests"].values() if q.get("status") == "active")
        if active_quests >= 3:
            await query.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ (3)", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
        new_quest = generate_random_quest(p["level"])
        quest_id = f"random_quest_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        p["quests"][quest_id] = {
            **new_quest,
            "progress": 0,
            "status": "active"
        }
        save_players()
        
        await query.answer(f"üéØ –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω: {new_quest['title']}", show_alert=True)
        await quests_cmd(update, context)
        return

# --------------------------------- Main --------------------------------------

def main():
    load_players()
    load_clans()
    app = ApplicationBuilder().token("YOUR_TOKEN_BOT").build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("inventory", inventory_cmd))
    app.add_handler(CommandHandler("use_potion", use_potion_cmd))
    app.add_handler(CommandHandler("quests", quests_cmd))
    app.add_handler(CommandHandler("adventure", adventure_cmd))
    app.add_handler(CommandHandler("shop", shop_cmd))
    app.add_handler(CommandHandler("casino", casino_cmd))
    app.add_handler(CommandHandler("achievements", achievements_cmd))
    app.add_handler(CommandHandler("daily", daily_cmd))
    app.add_handler(CommandHandler("pets", pets_cmd))
    app.add_handler(CommandHandler("clans", clans_cmd))
    app.add_handler(CommandHandler("pvp", pvp_cmd))
    app.add_handler(CommandHandler("pvp_challenge", pvp_challenge_cmd))
    app.add_handler(CommandHandler("business", businesses_cmd))
    app.add_handler(CommandHandler("spend", spend_cmd))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    app.add_handler(CallbackQueryHandler(battle_callback, pattern=r"^battle:"))
    app.add_handler(CallbackQueryHandler(shop_callback, pattern=r"^shop:"))
    app.add_handler(CallbackQueryHandler(casino_callback, pattern=r"^casino:"))
    app.add_handler(CallbackQueryHandler(clan_callback, pattern=r"^clan:"))
    app.add_handler(CallbackQueryHandler(businesses_callback, pattern=r"^biz:"))
    app.add_handler(CallbackQueryHandler(spend_callback, pattern=r"^spend:"))
    app.add_handler(CallbackQueryHandler(quest_callback, pattern=r"^quest:"))
    app.add_handler(CallbackQueryHandler(pvp_callback, pattern=r"^pvp:"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
